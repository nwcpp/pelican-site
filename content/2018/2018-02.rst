February 21st, 2018: Chapel's Muiltiresolution Programming Model
##############################################################################

:date: 2018-01-29
:slug: february-2018
:author: Pete Williamson

Time and Location
~~~~~~~~~~~~~~~~~

| February 21st, 2018 at 7:00 PM
| Room 1083, Building 30,
 `Map to building 30 <https://www.google.com/maps/place/Microsoft+Building+30/@47.645004,-122.1243829,17z/data=!3m1!4b1!4m5!3m4!1s0x54906d7a92bfda0f:0xc03a9c414544c91e!8m2!3d47.6450004!4d-122.1221942>`_,
| ``*****`` **Note, this is our *new* normal meeting room!** ``*****``
| Microsoft Campus,
| 156th Ave NE,
| Redmond, WA 98052.

Title
~~~~~
Chapel's Multiresolution Programming Model: Mixing high-level parallel abstractions with lower-level control

Abstract
~~~~~~~~
Chapel (http://chapel.cray.com) is an open-source language for general parallel computing at scale whose design and development are being led by Cray Inc.  Chapel is designed for portability and can be run on laptops, commodity clusters, and the cloud, in addition to supercomputers from Cray and other vendors.  As a productive parallel language, Chapel has support for data and task parallelism, data-centric synchronization, distributed memory execution, type inference, iterator functions, generic programming, meta-programming,   and OOP. 

In my last Northwest C++ Users' Group talk (Oct 2016), I provided a general overview of Chapel's philosophy and features.  In this talk, I'll start with a brief introduction to Chapel for those who are new, and then dive a bit deeper into some of Chapel's features that relate to C++ and how we use them to permit programmers to specify distributed array implementations within the language itself. This is what we refer to Chapel's multiresolution programming model, in which high-level concepts can be implemented at lower levels of the language.  I'll also provide a snapshot of recent Chapel performance and scalability results.

Speaker Bio
~~~~~~~~~~~
Bradford Chamberlain is a Principal Engineer at Cray Inc. where he works on parallel programming models, focusing primarily on the design and implementation of the Chapel language in his role as technical lead for that project. Brad received his Ph.D. in Computer Science & Engineering from the University of Washington in 2001 where he focused on the design and implementation of the ZPL parallel array language. In the past, he has also worked on languages for embedded reconfigurable processors and on algorithms for accelerating the rendering of complex 3D scenes. Brad remains associated with the University of Washington as an affiliate faculty member. He received his Bachelorâ€™s degree in Computer Science with honors from Stanford University in 1992.

A Word From Our Sponsor
~~~~~~~~~~~~~~~~~~~~~~~
Akvelon provides superior IT project support and software development solutions specializing in applying cutting-edge technology to problems in fields as diverse as mobile technology, finance, and healthcare. With over five hundred employees at seven offices worldwide, Akvelon is rapidly growing. Our firm is a global network of offices led by our partnership group. We have years of experience helping clients on a global scale drive innovation, productivity, and business performance.

Resources
~~~~~~~~~
`Video <https://www.youtube.com/watch?v=RmCT2bmENcU>`_ |
`Slides </talks/2018/ChapelForNWCPP2018-presented.pdf>`_

Digital Media Links
~~~~~~~~~~~~~~~~~~~
* Sign up for our `announcements mailing list <http://groups.google.com/group/NwcppAnnounce>`_ If you want to be more involved, sign up for our `volunteers <http://groups.google.com/group/nwcpp-volunteers>`_ list
* Check out our web page at http://www.nwcpp.org/
* Follow `@nwcpp <http://twitter.com/nwcpp>`_ on Twitter
* Join our `Facebook Group <http://www.facebook.com/group.php?gid=344125680930>`_
* Follow our `Google+ <https://plus.google.com/104974891006782790528/>`_ page
* Tune in to our `YouTube <http://www.youtube.com/user/NWCPP>`_ and `Vimeo <https://vimeo.com/nwcpp>`_ channels

