August 16, 2023: The Diamond Problem Solved!
############################################################################

:date: 2023-07-27
:slug: August-2023
:author: Lloyd Moore

Time and Location - We're HYBRID!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
| August 16, 2023 at 7:00 PM
|
| In Person:
| Microsoft Redmond Reactor | 3709 157th Ave NE, Redmond, WA 98052
| Conf Room 20/1034 (14) Alder Reactor
| `Map <https://www.google.com/maps/place/3709+157th+Ave+NE,+Redmond,+WA+98052/@47.6436781,-122.1332843,17z/data=!3m1!4b1!4m6!3m5!1s0x54906d71fad78e11:0x41c6b1be983cf409!8m2!3d47.6436745!4d-122.1310903!16s%2Fg%2F11cs8wbt2c>`_
|
| Remote:
| On Line Using Microsoft Teams
| `Click here to join the meeting <https://teams.microsoft.com/l/meetup-join/19%3ameeting_MGY3MDU4NzYtZWVkMi00ZjQ4LTliMTMtNGNhOTQ1NmMwYTc3%40thread.v2/0?context=%7b%22Tid%22%3a%2272f988bf-86f1-41af-91ab-2d7cd011db47%22%2c%22Oid%22%3a%22739ffc25-8fae-48b9-9505-1f3baa8f0eb7%22%7d>`_
| Meeting ID: 221 084 547 694
| Passcode: zRSbFd
|
| Call in (audio only)
| +1 323-849-4874,,731463717#<tel:+13238494874,,731463717#> United States, Los Angeles
| Phone Conference ID: 731 463 717#

Title
~~~~~
The Diamond Problem Solved!

Abstract
~~~~~~~~~
Traditionally in class based OOP languages, both the fields and methods from the super-classes are inherited by the sub-classes. However this may cause some serious problems in multiple inheritance, e.g. most notably the diamond problem. In this paper, we propose to stop inheriting data fields as a clean and general solution to such problems. We first present a design pattern called DDIFI (which stands for Decoupling Data Interface From data Implementation) to cleanly achieve multiple inheritance in C++, which can handle class fields of the diamond problem exactly according to the programmersâ€™ intended application semantics. It gives programmers flexibility when dealing with the diamond problem for instance variables: each instance variable can be configured either as one joined copy or as multiple independent copies in the implementation class. The key ideas are:

    1. Decouple data interface from data implementation, by stopping inheriting data fields

    2. In the regular methods implementation use virtual property methods instead of direct raw fields

    3. After each semantic branching add (and override) the new semantic assigning property

Then we show our method is general enough, and also applicable to any OOP languages:

    1. That natively support multiple inheritance (e.g. C++, Python, OCaml, Lisp, Eiffel, etc.), or

    2. Single inheritance languages that support default interface methods (e.g. Java, C# etc.), or

    3. Single inheritance languages that support mixins, and conditional compilation (e.g. static if in D), or traits (e.g. Scala).

We have demo implementation of this design pattern DDIFI in these 9 languages, since this is C++ talk, we will mostly talk about the C++ implementation.

Speaker Bio
~~~~~~~~~~~
YuQian Zhou: Ph.D from Oxford Univ.; previous Google engineer; startup founder.

A Word From Our Sponsor
~~~~~~~~~~~~~~~~~~~~~~~
Please thank JFrog and Conan for sponsoring the our Meetup account!

Please thank Microsoft for sponsoring our meeting room and Teams account!

Resources
~~~~~~~~~
`Slides </talks/2023/DDIFI.talk.pdf>`_

`Video <https://youtu.be/UITd8kNza3M>`_

Digital Media Links
~~~~~~~~~~~~~~~~~~~
* Sign up for our `announcements mailing list <http://groups.google.com/group/NwcppAnnounce>`_ If you want to be more involved, sign up for our `volunteers <http://groups.google.com/group/nwcpp-volunteers>`_ list
* Check out our web page at http://www.nwcpp.org/
* Follow `@nwcpp <http://twitter.com/nwcpp>`_ on Twitter
* Join our `Facebook Group <https://www.facebook.com/groups/344125680930/>`_
* Tune in to our `YouTube <http://www.youtube.com/user/NWCPP>`_ and `Vimeo <https://vimeo.com/nwcpp>`_ channels
* Follow us on `Meetup <https://www.linkedin.com/company/nwcpp>`_

