March 19th, 2008 — shared_ptr, Or: How I Learned To Stop Worrying And Love Resource Management — Stephan T. Lavavej
###################################################################################################################

:date: 2008-03-01
:slug: march-2008

Location
~~~~~~~~

| `Microsoft Corporation <http://www.microsoft.com>`_
| Building 41
| One Microsoft Way
| Redmond, Washington 98052

Abstract
~~~~~~~~

shared_ptr is the most powerful addition to the Standard C++ Library
since the STL itself.
This presentation begins with an overview of shared\_ptr's design
and the philosophy behind it.
Next, important uses of shared\_ptr are explained in detail—shared\_ptr isn't just for sharing!
Of course, new technologies come with new pitfalls.
Fortunately, shared\_ptr's pitfalls, covered here, can be easily avoided.
This presentation ends with advanced topics:
thread safety, custom deleters, custom allocators, other C++0x features,
and a tour of shared\_ptr's internals as implemented by Dinkumware.
Whether you haven't had a chance to use shared\_ptr yet,
or you've done everything but implement it,
this presentation should be useful to you.

Bio
~~~

Stephan T. Lavavej, who frequently uses his auspicious initials,
joined the Visual C++ Libraries team in January 2007.
He mainly works on the Standard C++ Library,
doing things like fixing epic conformance bugs and nuking iterator bloat.
Recently, he's worked with Dinkumware to integrate their TR1 implementation
as part of the Visual C++ 2008 Feature Pack.

He originally joined Microsoft in July 2004,
after receiving the degree of Bachelor Of Science With Honor in Computer Science
from the California Institute Of Technology,
and worked on Outlook 2007 Search. 
Among other things, he implemented hit highlighting, making stuff light up yellow.

His favorite data structure is the vector.
His second favorite data structure is the suffix tree,
which can be used to sort the suffixes of a string in linear time,
because that can be used to implement his favorite algorithm,
the Burrows-Wheeler Transform,
and also because it sounds totally impossible.

Resources
~~~~~~~~~

Download the `slides </talks/2008/nwcpp-2008.03.19.pdf>`_
from the presentation.
