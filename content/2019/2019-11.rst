Nov 20th, 2019: A Unifying Abstraction for Async in C++
#######################################################

:date: 2019-10-26
:slug: Nov-2019
:author: Lloyd Moore

Time and Location
~~~~~~~~~~~~~~~~~
| Nov 20th, 2019 at 7:00 PM
| Room 1083, Building 30,
 `Map to building 30 <https://www.google.com/maps/place/Microsoft+Building+30/@47.645004,-122.1243829,17z/data=!3m1!4b1!4m5!3m4!1s0x54906d7a92bfda0f:0xc03a9c414544c91e!8m2!3d47.6450004!4d-122.1221942>`_,
| Microsoft Campus,
| 156th Ave NE,
| Redmond, WA 98052.

Title
~~~~~
A Unifying Abstraction for Async in C++

Abstract
~~~~~~~~
Async in C++ is in a sad state. The standard tools -- promises, futures, threads, locks, and std::async -- are either inefficient, broken, or both. Even worse, there is no standard way to say _where_ work should happen. Parallel algorithms, heterogeneous computing, networking & IO, reactive streams, and more: all critically important foundational technologies that await a standard abstraction for asynchronous computation.

In this talk, Eric Niebler digs into the Standard Committee's search for the basis operations that underpin all asynchronous computation: the long-sought Executor concept. The latest iteration of Executors is based on the Sender/Receiver programming model, which provides a generalization of many existing paradigms in asynchronous programming, including future/promise, message passing, continuation passing, channels, and the observer pattern from reactive programming. It also has surprising and deep connections to coroutines, which further demonstrates the modelâ€™s potential to be a truly unifying abstraction for asynchronous programming in C++20 and beyond.

Eric will present the short-term and long-term directions for Executors in ISO Standard C++, illustrating the design by walking through several implementation examples. They will talk about the direct connection between coroutines and the Sender/Receiver model and discuss what it means for the future of asynchronous APIs in C++. Finally, he will cover how the restrictions imposed by the Executors model should affect the way you write code today so your code is ready for the next big revolution in parallel and concurrent C++ programming.

Speaker Bio
~~~~~~~~~~~
Eric Niebler has been doing C++ professionally for the past 20 years, first for Microsoft, then as an independent consultant. He spent several years bringing Ranges to the Standard Library, in part with the generous help of the Standard C++ Foundation. Today, He is working at Facebook searching for the foundational abstractions of asynchronous programming. Ask him about the future of the Standard Library or about range-v3 or about executors and sender/receiver.

A Word From Our Sponsor
~~~~~~~~~~~~~~~~~~~~~~~
Please thank John Galt (https://j-galt.com/) and Triple Crown (https://www.tripleco.com/find-tech-jobs/) for sponsoring our pizza this month!

Resources
~~~~~~~~~
`Video <https://youtu.be/GGCP92GF1ss>`_

Digital Media Links
~~~~~~~~~~~~~~~~~~~
* Sign up for our `announcements mailing list <http://groups.google.com/group/NwcppAnnounce>`_ If you want to be more involved, sign up for our `volunteers <http://groups.google.com/group/nwcpp-volunteers>`_ list
* Check out our web page at http://www.nwcpp.org/
* Follow `@nwcpp <http://twitter.com/nwcpp>`_ on Twitter
* Join our `Facebook Group <http://www.facebook.com/group.php?gid=344125680930>`_
* Follow our `Google+ <https://plus.google.com/104974891006782790528/>`_ page
* Tune in to our `YouTube <http://www.youtube.com/user/NWCPP>`_ and `Vimeo <https://vimeo.com/nwcpp>`_ channels

