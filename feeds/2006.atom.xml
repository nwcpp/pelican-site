<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Northwest C++ Users’ Group</title><link href="http://nwcpp.org/" rel="alternate"></link><link href="http://nwcpp.org/feeds/2006.atom.xml" rel="self"></link><id>http://nwcpp.org/</id><updated>2006-12-31T00:00:00-08:00</updated><entry><title>2006</title><link href="http://nwcpp.org/2006-summary.html" rel="alternate"></link><published>2006-12-31T00:00:00-08:00</published><author><name>George Reilly</name></author><id>tag:nwcpp.org,2006-12-31:2006-summary.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/january-2006.html"&gt;January 18th, 2006 — Policy-Based Memory Allocation — Andrei&amp;nbsp;Alexandrescu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/february-2006.html"&gt;February 15th, 2006 — The Phoenix Compiler and Tools Framework — Andy&amp;nbsp;Ayers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/march-2006.html"&gt;March 15th, 2006 — Functional Programming in C++ using Boost.Lambda — Bartosz&amp;nbsp;Milewski&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/april-2006.html"&gt;April 19th, 2006 — C++ on Next-Gen Consoles: Effective Code for New Architectures — Pete&amp;nbsp;Isensee&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/may-2006.html"&gt;May 17th, 2006 — The Power of None — Andrei&amp;nbsp;Alexandrescu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/june-2006.html"&gt;June 21st, 2006 — Roundtable Meeting — Open&amp;nbsp;Discussion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/july-2006.html"&gt;July 19th, 2006 — Roundtable Meeting — Open&amp;nbsp;Discussion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/august-2006.html"&gt;August 16th, 2006 — Roundtable Meeting — Open&amp;nbsp;Discussion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/september-2006.html"&gt;September 13th, 2006 — The Concur Project — Herb&amp;nbsp;Sutter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/october-2006.html"&gt;October 18th, 2006 — The Cost of C++ Exception Handling on Windows — Kevin&amp;nbsp;Frei&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/november-2006.html"&gt;November 15th, 2006 — What makes a Good Programmer? Things they never told you — Adair&amp;nbsp;Dingle&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/december-2006.html"&gt;December 2006: No&amp;nbsp;Meeting&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>December 2006: No Meeting</title><link href="http://nwcpp.org/december-2006.html" rel="alternate"></link><published>2006-12-01T00:00:00-08:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-12-01:december-2006.html</id><summary type="html"></summary></entry><entry><title>November 15th, 2006 — What makes a Good Programmer? Things they never told you — Adair Dingle</title><link href="http://nwcpp.org/november-2006.html" rel="alternate"></link><published>2006-11-01T00:00:00-08:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-11-01:november-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 40&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Time constraints and demands for breadth constrain academic instruction.
Job experience fills in the gap between theory and practice.
Here we discuss some circumvented hurdles
(representation, resource management, failures)
as well as key characteristics of students who succeed as&amp;nbsp;professionals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Adair Dingle has over 15 years of teaching experience.
Currently an associate professor of Computer Science at Seattle University,
she annually supervises capstone projects
where seniors develop software products for industry sponsors.
Between undergraduate and graduate studies,
Adair worked in industry for 3 years as a software developer.
Recently, she co-authored (with software consultant Tom Hildebrandt)
&lt;em&gt;C++: Memory First&lt;/em&gt;, a text for immediate-level programmers
exploring background processes critical to software&amp;nbsp;design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2006/NWCPP1106.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch a &lt;a class="reference external" href="http://video.google.com/videoplay?docid=-3746958180505089789&amp;amp;q=nwcpp"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 18th, 2006 — The Cost of C++ Exception Handling on Windows — Kevin Frei</title><link href="http://nwcpp.org/october-2006.html" rel="alternate"></link><published>2006-10-01T00:00:00-07:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-10-01:october-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 40&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a long running emotional battle over C++ exception handling.
Rather than argue for or against either side,
I&amp;#8217;ll be going into low-level detail of
how much it costs to use on Windows for both x86 and &lt;span class="caps"&gt;AMD64&lt;/span&gt;.
This should help people see through the emotion
and get a real handle on what it costs,
and provide them with facts to help make the decisions
of why, how, and when C++ exceptions should or should not be&amp;nbsp;used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been at &lt;span class="caps"&gt;MSFT&lt;/span&gt; for 9 years,
working on the compiler back end/optimizer the entire time.
I&amp;#8217;m currently responsible for the Orcas optimizer, linker, and other &amp;#8216;tools&amp;#8217;
while the rest of the team works on the &amp;quot;Phoenix&amp;quot;&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Prior to my life at Microsoft, I graduated from the University of Utah with a &lt;span class="caps"&gt;BS&lt;/span&gt; in &lt;span class="caps"&gt;CS&lt;/span&gt;.
I have a wife &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 3 kids, enjoy playing with my kids,
woodworking, mountain biking, writing goofy projects to learn new technologies,
and wasting time in front of a variety of video&amp;nbsp;games.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2006/ehc.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch a &lt;a class="reference external" href="http://video.google.com/videoplay?docid=9169999597330548749&amp;amp;hl=en"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 13th, 2006 — The Concur Project — Herb Sutter</title><link href="http://nwcpp.org/september-2006.html" rel="alternate"></link><published>2006-09-01T00:00:00-07:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-09-01:september-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-concur-project-some-experimental-concurrency-abstractions-for-imperative-languages"&gt;
&lt;h2&gt;The Concur Project: Some Experimental Concurrency Abstractions for Imperative&amp;nbsp;Languages&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Herb Sutter is a software architect at Microsoft
and chair of the &lt;span class="caps"&gt;ISO&lt;/span&gt; C++ standards committee.
Among his books and papers on software development
is the widely-cited article &amp;quot;The Free Lunch Is Over&amp;quot;
where he coined the title phrase and &amp;quot;concurrency revolution&amp;quot;
as applied to describe the software sea change
now in progress to exploit increasingly parallel&amp;nbsp;hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2006/The_Concur_Project_-_NWCPP.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch a &lt;a class="reference external" href="http://video.google.com/videoplay?docid=7625918717318948700&amp;amp;q=herb+sutter"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 16th, 2006 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2006.html" rel="alternate"></link><published>2006-08-01T00:00:00-07:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-08-01:august-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.georgeanddragonpub.com/"&gt;The George &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Dragon Pub&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;206 North 36th St&lt;/div&gt;
&lt;div class="line"&gt;Seattle, &lt;span class="caps"&gt;WA&lt;/span&gt; 98103&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 19th, 2006 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2006.html" rel="alternate"></link><published>2006-07-01T00:00:00-07:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-07-01:july-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.georgeanddragonpub.com/"&gt;The George &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Dragon Pub&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;206 North 36th St&lt;/div&gt;
&lt;div class="line"&gt;Seattle, &lt;span class="caps"&gt;WA&lt;/span&gt; 98103&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>June 21st, 2006 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/june-2006.html" rel="alternate"></link><published>2006-06-01T00:00:00-07:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-06-01:june-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 17th, 2006 — The Power of None — Andrei Alexandrescu</title><link href="http://nwcpp.org/may-2006.html" rel="alternate"></link><published>2006-05-01T00:00:00-07:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-05-01:may-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Exceptions. The final frontier.
We wanted to understand them.
We thought we&amp;#8217;ll love them, but they&amp;#8217;ve lacerated our code.
We hated them.
We tried to do without them.
We couldn&amp;#8217;t because they kept on throwing themselves at us.
In bitworld, exceptions might have cast upon us the closest analogy
to a love-hate, abusive, co-dependent&amp;nbsp;relationship.&lt;/p&gt;
&lt;p&gt;This talk has two purposes.
First purpose is group therapy.
We will try to explain through a dialog linking cause to effect,
why things are the way they are.
Second, we discuss how to escape the abuse cycle
by summoning an unexpected ally: the type system.
Come one, come all for one cathartic&amp;nbsp;hour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is a graduate student at the University of Washington in Seattle,
working on the lean and mean speech recognition machine
that we all know (since 1960) will be completed within 5 years.
In the C++ community, Andrei is best known
for his best-selling (and tuition-paying) books,
&lt;em&gt;Modern C++ Design&lt;/em&gt; and &lt;em&gt;C++ Coding Standards&lt;/em&gt;,
the latter coauthored with Herb Sutter.
Andrei has also published numerous articles
on software design and implementation using C++,
and in spite of his accent is a sought-after speaker at numerous conferences worldwide.
His website is &lt;a class="reference external" href="http://www.erdani.org"&gt;www.erdani.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/The_Power_of_None.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 19th, 2006 — C++ on Next-Gen Consoles: Effective Code for New Architectures — Pete Isensee</title><link href="http://nwcpp.org/april-2006.html" rel="alternate"></link><published>2006-04-01T00:00:00-08:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-04-01:april-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;At &lt;span class="caps"&gt;GDC&lt;/span&gt; 2005, Chris Hecker stated that average game code
is going to run slower on next-generation consoles than on the current generation.
In many ways, he’s right.
Programmers accustomed to having &lt;span class="caps"&gt;CPU&lt;/span&gt; silicon
devoted to out-of-order execution units and instruction pipelining
are in for a rude awakening.
A few brave souls will turn to assembly language optimizations,
but what about the rest of us who use C++ on a daily basis?
This talk is for you.
Find out how to write C++ code that runs like a dream on next-generation&amp;nbsp;consoles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Pete has been programming in the game industry for 10 years.
He has shipped titles ranging from adventure stories to online games,
working on everything from Macs to consoles.
He is currently a lead engineer with the Xbox Advanced Technology Group.
He has a degree in computer engineering
and was a C++ template geek long before compilers knew what to make of functors and&amp;nbsp;traits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.cmpevents.com/sessions/GD/S1549i1.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 15th, 2006 — Functional Programming in C++ using Boost.Lambda — Bartosz Milewski</title><link href="http://nwcpp.org/march-2006.html" rel="alternate"></link><published>2006-03-01T00:00:00-08:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-03-01:march-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The power of &lt;span class="caps"&gt;STL&lt;/span&gt; is partially due to its embracing elements of functional programming.
Algorithms implemented in &lt;span class="caps"&gt;STL&lt;/span&gt;, such as &lt;tt class="docutils literal"&gt;for_each&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;accumulate&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;find&lt;/tt&gt;, etc.,
have functional customization points.
You can customize them by providing your own function objects—be it a pointer to a function, a functor object, or a predicate object.
Unfortunately, &lt;span class="caps"&gt;STL&lt;/span&gt; provides very limited (and syntactically awkward)
support for creating and combining function&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;C++ programmers have been eying lambda calculus with envy for some time now.
Several libraries have been proposed that implement elements of lambda calculus
using template metaprogramming in C++,
one of them being Boost.Lambda.
With these facilities, you can easily create and manipulate function objects on the fly.
What&amp;#8217;s more important, you can then pass such objects to &lt;span class="caps"&gt;STL&lt;/span&gt; algorithms to tap their full&amp;nbsp;power.&lt;/p&gt;
&lt;p&gt;The slides for this talk were created by David Abrahams and Eric&amp;nbsp;Niebler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz is a theoretical physicist turned programmer.
He is the author of &lt;em&gt;C++ In Action&lt;/em&gt;, published by Addison-Wesley in 2001.
He founded &lt;a class="reference external" href="http://www.relisoft.com"&gt;Reliable Software &lt;span class="caps"&gt;LLC&lt;/span&gt;&lt;/a&gt; in 1996
to get first-hand experience in creating and maintaining a large software project—a version-control system called Code Co-op.
Studying complexity is his main&amp;nbsp;interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/Customization_Points_and_Polymorphism.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 15th, 2006 — The Phoenix Compiler and Tools Framework — Andy Ayers</title><link href="http://nwcpp.org/february-2006.html" rel="alternate"></link><published>2006-02-01T00:00:00-08:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-02-01:february-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-phoenix-compiler-and-tools-framework-built-from-building-and-building-on-c-cli"&gt;
&lt;h2&gt;The Phoenix Compiler and Tools Framework: Built From, Building, and Building On C++/&lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Phoenix, Microsoft&amp;#8217;s next generation compiler and tools framework,
is built entirely in C++/&lt;span class="caps"&gt;CLI&lt;/span&gt;.
Phoenix&amp;#8217;s design leverages both the traditional strengths of C++
and the innovative features of &lt;span class="caps"&gt;CLI&lt;/span&gt; binding.
The Phoenix framework&amp;#8217;s flexible, and extensible components
make extensive use of &lt;span class="caps"&gt;CLI&lt;/span&gt; features like ref classes, properties, events, and delegates.
We&amp;#8217;ll demonstrate how C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; enables Phoenix
to produce not only powerful compiler and jit components
that will help implement and optimize C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; programs
but also produce novel and efficient tools for
C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; program analysis, understanding, and&amp;nbsp;manipulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andy is an Architect and Dev Lead on the Microsoft Phoenix Project.
He joined Microsoft in 2002.
Andy has created program analysis tools at InCert Software
and written optimizing compilers at Hewlett Packard.
His fascination with the challenges C++ presents to language implementers
dates back to his days as a graduate student at &lt;span class="caps"&gt;MIT&lt;/span&gt; in the late&amp;nbsp;1980&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/Ayers_NWCPP_Talk.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 18th, 2006 — Policy-Based Memory Allocation — Andrei Alexandrescu</title><link href="http://nwcpp.org/january-2006.html" rel="alternate"></link><published>2006-01-01T00:00:00-08:00</published><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-01-01:january-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Traditionally, memory allocation is approached as a monolithic, rigid design
influenced by a performance-minded implementation.
However, compile-time C++ techniques can yield
a highly flexible and configurable design
with the same performance profile
as equivalent hand-implemented designs.
This talk describes work by Emery Berger and others
who have designed and implemented a policy-based&amp;nbsp;allocator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is working on a graduate degree
at the University of Washington in Seattle,
specializing in automatic speech recognition.
In the C++ community, Andrei is best known for his books &lt;em&gt;Modern C++ Design&lt;/em&gt;
and &lt;em&gt;C++ Coding Standards&lt;/em&gt; (the latter coauthored with Herb Sutter).
Andrei is also a columnist for &lt;em&gt;C/C++ Users Journal&lt;/em&gt;,
a C++ former columnist for the &lt;em&gt;C++ Report&lt;/em&gt;,
a guest speaker at numerous conferences,
and one of the featured instructors of
&lt;a class="reference external" href="http://www.thecppseminar.com"&gt;The C++ Seminar&lt;/a&gt;).
His website is &lt;a class="reference external" href="http://www.erdani.com"&gt;www.erdani.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/ChromedMetal.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry></feed>