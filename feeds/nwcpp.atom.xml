<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Northwest C++ Users’ Group</title><link href="http://nwcpp.org/" rel="alternate"></link><link href="http://nwcpp.org/feeds/nwcpp.atom.xml" rel="self"></link><id>http://nwcpp.org/</id><updated>2014-12-01T00:00:00-08:00</updated><entry><title>December 2014: No Meeting</title><link href="http://nwcpp.org/december-2014.html" rel="alternate"></link><updated>2014-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2014-12-01:december-2014.html</id><summary type="html"></summary></entry><entry><title>August 2014: No Meeting</title><link href="http://nwcpp.org/august-2014.html" rel="alternate"></link><updated>2014-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2014-08-01:august-2014.html</id><summary type="html"></summary></entry><entry><title>July 2014: No Meeting</title><link href="http://nwcpp.org/july-2014.html" rel="alternate"></link><updated>2014-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2014-07-01:july-2014.html</id><summary type="html"></summary></entry><entry><title>December 2013: No Meeting</title><link href="http://nwcpp.org/december-2013.html" rel="alternate"></link><updated>2013-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2013-12-01:december-2013.html</id><summary type="html"></summary></entry><entry><title>August 2013: No Meeting</title><link href="http://nwcpp.org/august-2013.html" rel="alternate"></link><updated>2013-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2013-08-01:august-2013.html</id><summary type="html"></summary></entry><entry><title>December 2012: No Meeting</title><link href="http://nwcpp.org/december-2012.html" rel="alternate"></link><updated>2012-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2012-12-01:december-2012.html</id><summary type="html"></summary></entry><entry><title>August 2012: No Meeting</title><link href="http://nwcpp.org/august-2012.html" rel="alternate"></link><updated>2012-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2012-08-01:august-2012.html</id><summary type="html"></summary></entry><entry><title>July 2012: No Meeting</title><link href="http://nwcpp.org/july-2012.html" rel="alternate"></link><updated>2012-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2012-07-01:july-2012.html</id><summary type="html"></summary></entry><entry><title>Contact NWCPP</title><link href="http://nwcpp.org/contact.html" rel="alternate"></link><updated>2012-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2012-06-01:contact.html</id><summary type="html">&lt;p&gt;If you need to contact the &lt;span class="caps"&gt;NWCPP&lt;/span&gt; board and the
&lt;a class="reference external" href="http://nwcpp.org/about.html"&gt;social media channels&lt;/a&gt; aren&amp;#8217;t enough,
use this form to email&amp;nbsp;us.&lt;/p&gt;
&lt;!-- :ref:`social-media` aren't enough, --&gt;
&lt;!-- Adapted from http://www.bloggerbuster.com/2012/04/create-contact-form-with-google-docs.html --&gt;
&lt;iframe src="https://docs.google.com/spreadsheet/embeddedform?formkey=dHlUZmZGbFFhMjd6a0M0NGh1WGtQanc6MQ"
        width="760" height="891" frameborder="0" marginheight="0" marginwidth="0"&gt;
    Loading&amp;#8230;
&lt;/iframe&gt;</summary></entry><entry><title>January 25th, 2012 — Finding Race Condition and Data Races Effectively — Madan Musuvathi</title><link href="http://nwcpp.org/january-2012.html" rel="alternate"></link><updated>2012-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2012-01-01:january-2012.html</id><summary type="html">&lt;div class="section" id="time-and-location"&gt;
&lt;h2&gt;Time and&amp;nbsp;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;January 25th, 2012 at 7:00 &lt;span class="caps"&gt;PM&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Microsoft Campus.&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.bing.com/maps/?v=2&amp;amp;where1=Microsoft+Building+43"&gt;Building 43/1540–Adams&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;(note room change).&lt;/div&gt;
&lt;div class="line"&gt;This meeting was originally scheduled for Jan 18th but postponed due to snow.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Come at 6:30pm for pizza supplied by
&lt;a class="reference external" href="http://bit.ly/STBjobs"&gt;Microsoft Server and Tools&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In this talk, I will describe two &lt;span class="caps"&gt;MSR&lt;/span&gt; tools,
Cuzz and DataCollider, for finding concurrency errors.
Cuzz uses a randomized algorithm to insert delays
in a concurrent program to force race conditions with probabilistic guarantees.
Cuzz is easy to use and is integrated with Microsoft’s Application Verifier.
DataCollider uses hardware facilities in interesting ways
to find data races with little runtime overhead.
While other data-race detection techniques incur a 1000% runtime overhead or more,
DataCollider incurs about 0 to 20%&amp;nbsp;overhead.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Madan Musuvathi is a Senior Researcher in the
&lt;a class="reference external" href="http://research.microsoft.com/groups/rise/"&gt;Research in Software Engineering&lt;/a&gt; group at
&lt;a class="reference external" href="http://research.microsoft.com/"&gt;Microsoft Research&lt;/a&gt;.
His research focus is on scalable analysis of concurrent systems.
More broadly, his interests include systems, program analysis, model checking,
verification, and theorem proving.
He also spends a lot of time at Microsoft
building analysis tools to improve the productivity of software developers and&amp;nbsp;testers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://vimeo.com/35722387"&gt;Video&lt;/a&gt; |
&lt;a class="reference external" href="/talks/2012/nwcpp-2012-01-musuvathi-cuzz-datacollider.pptx"&gt;Slides&lt;/a&gt; |
&lt;a class="reference external" href="http://research.microsoft.com/pubs/118655/asplos277-pct.pdf"&gt;Cuzz paper&lt;/a&gt; |
&lt;a class="reference external" href="http://research.microsoft.com/pubs/139266/DataCollider%20-%20OSDI2010.pdf"&gt;DataCollider paper&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2011: No Meeting</title><link href="http://nwcpp.org/december-2011.html" rel="alternate"></link><updated>2011-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2011-12-01:december-2011.html</id><summary type="html"></summary></entry><entry><title>August 2011: No Meeting</title><link href="http://nwcpp.org/august-2011.html" rel="alternate"></link><updated>2011-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2011-08-01:august-2011.html</id><summary type="html"></summary></entry><entry><title>July 2011: No Meeting</title><link href="http://nwcpp.org/july-2011.html" rel="alternate"></link><updated>2011-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2011-07-01:july-2011.html</id><summary type="html"></summary></entry><entry><title>December 2010: No Meeting</title><link href="http://nwcpp.org/december-2010.html" rel="alternate"></link><updated>2010-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2010-12-01:december-2010.html</id><summary type="html"></summary></entry><entry><title>August 2010: No Meeting</title><link href="http://nwcpp.org/august-2010.html" rel="alternate"></link><updated>2010-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2010-08-01:august-2010.html</id><summary type="html"></summary></entry><entry><title>July 2010: No Meeting</title><link href="http://nwcpp.org/july-2010.html" rel="alternate"></link><updated>2010-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2010-07-01:july-2010.html</id><summary type="html"></summary></entry><entry><title>February 2010: No Meeting</title><link href="http://nwcpp.org/february-2010.html" rel="alternate"></link><updated>2010-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2010-02-01:february-2010.html</id><summary type="html"></summary></entry><entry><title>January 2010: No Meeting</title><link href="http://nwcpp.org/january-2010.html" rel="alternate"></link><updated>2010-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2010-01-01:january-2010.html</id><summary type="html"></summary></entry><entry><title>December 2009: No Meeting</title><link href="http://nwcpp.org/december-2009.html" rel="alternate"></link><updated>2009-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-12-01:december-2009.html</id><summary type="html"></summary></entry><entry><title>November 18th, 2009 — Metaprogramming in D : Some Real-world Examples — Bill Baxter</title><link href="http://nwcpp.org/november-2009.html" rel="alternate"></link><updated>2009-11-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-11-01:november-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In the D Programming Language
it is possible for even mere mortals to write code that executes at compile-time.
And the resulting code is generally even human readable!
In this talk I&amp;#8217;ll show some of the metaprogramming techniques available in D today,
primarily by examining various tricks I&amp;#8217;ve found useful in my own code —
in vector and matrix classes, in my port of the OpenMesh C++ library to D, and so on.
I&amp;#8217;ll make some attempt to relate these back to C++ as well,
though my threshold for pain is not very&amp;nbsp;high.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bill Baxter is a researcher in the eXtreme Computing Group of Microsoft Research,
currently working on &lt;span class="caps"&gt;GPU&lt;/span&gt; applications.
Before moving to Washington earlier this year,
Bill was a computer graphics researcher and frequent sushi consumer at &lt;span class="caps"&gt;OLM&lt;/span&gt; Digital in Tokyo,
the company best known for its Pokemon animations.
Bill has been using C++ for about 15 years, and D for the last three.
Bill has a Ph.D. in computer science from the University of North Carolina at Chapel Hill.
Sometimes he can be found strumming a guitar
to temporarily escape the workaday worries of the&amp;nbsp;world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2009/NWCPP-D-meta-baxter-11-18-2009.pptx"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 21st, 2009 — Haskell and C++ Template Metaprogramming — Bartosz Milewski</title><link href="http://nwcpp.org/october-2009.html" rel="alternate"></link><updated>2009-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-10-01:october-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;It’s a well known fact in C++ metaprogramming circles
that it’s all based on functional programming.
What else is based on functional programming?
Haskell!
I will go through functional features of Haskell, one by one,
and show you how they are implemented using C++ templates.
Functions, recursion, pattern matching, higher-order functions,
list processing, list comprehension and more…
No previous contact with Haskell is required,
although some familiarity with C++ templates will be assumed.
I’ll also talk about C++0x variadic templates and template parameter&amp;nbsp;packs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski has a Ph.D. in Theoretical Physics.
He published several papers on Quantum Gravity and String Theory
before he switched to programming and Computer Science.
He was project lead for the Microsoft search engine before the Internet explosion.
He published a book, &lt;em&gt;C++ In Action&lt;/em&gt;.
Bartosz keeps up with the latest developments in &lt;span class="caps"&gt;CS&lt;/span&gt;
by attending graduate courses and seminars at the &lt;span class="caps"&gt;UW&lt;/span&gt;.
He actively works on the design of the D language.
He regularly blogs about programming languages and concurrency at
&lt;a class="reference external" href="http://BartoszMilewski.wordpress.com"&gt;http://BartoszMilewski.wordpress.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2009/Haskell_and_C___Template.pdf"&gt;Slides&lt;/a&gt; |
&lt;a class="reference external" href="http://www.vimeo.com/7211030"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 16th, 2009 — Ownership System Against Data Races — Bartosz Milewski</title><link href="http://nwcpp.org/september-2009.html" rel="alternate"></link><updated>2009-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-09-01:september-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;After reading a bunch of papers about type systems
that prevent data races in multithreaded programs,
I asked myself the question:
Short of a type system, can a clever methodology be used to prevent data races?
It turns out that clear understanding of what data is shared
and which operations are inherently unsafe
goes a long way towards eliminating sources of data races.
I&amp;#8217;ll talk about monitors, ownership, alias control,
unique objects and lock-free programming,
all in the service of race-free&amp;nbsp;concurrency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski has a Ph.D. in Theoretical Physics.
He published several papers on Quantum Gravity and String Theory
before he switched to programming and Computer Science.
He was project lead for the Microsoft search engine before the Internet explosion.
He published a book, &lt;em&gt;C++ In Action&lt;/em&gt;.
Bartosz keeps up with the latest developments in &lt;span class="caps"&gt;CS&lt;/span&gt;
by attending graduate courses and seminars at the &lt;span class="caps"&gt;UW&lt;/span&gt;.
He actively works on the design of the D language.
He regularly blogs about concurrency at
&lt;a class="reference external" href="http://BartoszMilewski.wordpress.com"&gt;http://BartoszMilewski.wordpress.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2009/Ownership_Systems_against_Data_Races.pdf"&gt;Slides&lt;/a&gt; |
&lt;a class="reference external" href="http://www.vimeo.com/6689999"&gt;Video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 2009: No Meeting</title><link href="http://nwcpp.org/august-2009.html" rel="alternate"></link><updated>2009-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-08-01:august-2009.html</id><summary type="html"></summary></entry><entry><title>July 2009: No Meeting</title><link href="http://nwcpp.org/july-2009.html" rel="alternate"></link><updated>2009-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-07-01:july-2009.html</id><summary type="html"></summary></entry><entry><title>June 17th, 2009 — Concurrent Programming in the D Programming Language — Walter Bright</title><link href="http://nwcpp.org/june-2009.html" rel="alternate"></link><updated>2009-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-06-01:june-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Many-core concurrent programming offers exciting and compelling advantages.
The single-core, single-thread programming model
is assumed by imperative programming languages.
This model offers sequential consistency as its fundamental characteristic.
Because many-core systems use layered cache memory systems,
sequential consistency is not guaranteed among threads.
Because imperative programming languages
allow implicit sharing of data between threads,
many misguided idioms and optimizations are possible
that erroneously assume sequential consistency.
One example of this is the double-checked locking optimization.
The pernicious nature of these sorts of bugs is
they defy programmers&amp;#8217; natural intuition about how programs behave,
they are not statically detectable,
and there is no way to reliably test a program to rule out the existence of such bugs.
A program may appear to work, but have problems appear years later,
fail when ported to a different platform,
and such problems may be extremely hard to reproduce and&amp;nbsp;track down.
In essence, the correctness of the program
relies entirely on the expertise and care of the programmer.
This is not an acceptable situation for developers of programs that require high&amp;nbsp;reliability.&lt;/p&gt;
&lt;p&gt;The D programming language is an imperative programming language
with an innovative type system that prevents implicit sharing
and also fosters a complete, integrated pure functional subset.
It is possible to statically verify that D programs do not have sequential consistency bugs.
The double-checked locking optimization bug is not possible.
Type support for shared data and immutable data, as well as pure functions,
means that mutating data interactions between threads
can occur only under carefully controlled conditions.
This dramatically reduces the problem space for concurrency bugs
from the whole of the source code to a small subset of it,
making it a much more tractable&amp;nbsp;problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright graduated from Caltech in 1979 with a degree in mechanical engineering.
He worked for Boeing for 3 years on the development of the 757 stabilizer trim system.
He then switched to writing software, in particular compilers,
and has been writing them ever&amp;nbsp;since.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2009/accu.pdf"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 20th, 2009 — Concurrency Runtime and Parallel Pattern Library — Dana Groff, Don McCrady, and Rick Molloy</title><link href="http://nwcpp.org/may-2009.html" rel="alternate"></link><updated>2009-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-05-01:may-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="c-building-scalable-applications-in-visual-studio-2010-with-the-concurrency-runtime-and-parallel-pattern-library"&gt;
&lt;h2&gt;C++: Building scalable applications in Visual Studio 2010 with the Concurrency Runtime and Parallel Pattern&amp;nbsp;Library&lt;/h2&gt;
&lt;p&gt;In this talk, we&amp;#8217;ll do a deep dive of the Concurrency Runtime
and the Parallel Libraries built on top of them,
and talk about what&amp;#8217;s new since the Visual Studio 2010 &lt;span class="caps"&gt;CTP&lt;/span&gt;.
We&amp;#8217;ll provide a hands on look at how to use the Parallel Pattern Library
and the Asynchronous Agents Library together
to express parallelism and maintain responsiveness in applications.
We&amp;#8217;ll discuss how to use the Concurrency Runtime
to manage multiple scheduler instances within an application,
how to extend the Concurrency Runtime itself for additional programming models,
and how to fulfill quality of service requirements with the Resource Manager.
Finally we&amp;#8217;ll talk about how the Concurrency Runtime
takes advantage of the new Windows 7 functionality,
User Mode Scheduled Threads and support for &amp;gt; 64 processors,
to enable additional scalability on the Windows&amp;nbsp;Platform.&lt;/p&gt;
&lt;p&gt;The presentation will be given by members of the Concurrency Runtime team:
Dana Groff, Don McCrady and Rick&amp;nbsp;Molloy.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 15th, 2009 — Axum: The Language Of Agents — Artur Laksberg</title><link href="http://nwcpp.org/april-2009.html" rel="alternate"></link><updated>2009-04-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-04-01:april-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Axum is an incubation project in Microsoft&amp;#8217;s Parallel Computing Team.
A .Net programming language based on asynchronous agents, isolation, and message-passing,
Axum allows developers to partition their applications
into isolated components that communicate with each other via message passing
and access shared state in a disciplined&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;Axum has not yet been released by Microsoft but it is nearing its first public beta.
Please check out Axum team blog at
&lt;a class="reference external" href="http://blogs.msdn.com/maestroteam"&gt;http://blogs.msdn.com/maestroteam&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Artur Laksberg is a software design engineer in the Parallel Computing Team at Microsoft.
During his career, Artur was involved in various projects
including Visual C++ compiler and &lt;span class="caps"&gt;SQL&lt;/span&gt; Server.
Over the last year, Artur has been a member of a small team in the Developer Division
incubating new technologies for parallel programming.
Native of Estonia, Artur lives in Redmond with his wife and&amp;nbsp;son.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Download the &lt;a class="reference external" href="/talks/2009/Axum_Presentation.pptx"&gt;slides&lt;/a&gt;
and &lt;a class="reference external" href="/talks/2009/Axum_Presentation_code.zip"&gt;source code&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/li&gt;
&lt;li&gt;Watch the &lt;a class="reference external" href="http://www.vimeo.com/4438927"&gt;video&lt;/a&gt; for a video of the&amp;nbsp;presentation.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blogs.msdn.com/maestroteam/archive/2009/05/07/the-first-axum-bits-are-now-available.aspx"&gt;Axum is now publicly&amp;nbsp;available!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 18th, 2009 — How Compilers Work — Walter Bright</title><link href="http://nwcpp.org/march-2009.html" rel="alternate"></link><updated>2009-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-03-01:march-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Compilers are a fundamental tool for programmers.
Knowing how they work enables a much more effective use of them.
This presentation covers how they work—the various passes like lexing, parsing semantic analysis,
optimization, and code generation—and how they fit together to transform source code into executable&amp;nbsp;code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright graduated from Caltech in 1979 with a degree in mechanical engineering.
He worked for Boeing for 3 years on the development of the 757 stabilizer trim system.
He then switched to writing software, in particular compilers,
and has been writing them ever since.
He&amp;#8217;s written compilers for Pascal, &lt;span class="caps"&gt;ABEL&lt;/span&gt;, C, C++, Javascript, Java,
and now the D programming&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 18th, 2009 — CCR: Concurrency and Coordination Runtime — Andreas Ulbrich</title><link href="http://nwcpp.org/february-2009.html" rel="alternate"></link><updated>2009-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-02-01:february-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The Concurrency and Coordination Runtime (&lt;span class="caps"&gt;CCR&lt;/span&gt;)
provides developers an easy way to create and coordinate
loosely-coupled, data-driven applications.
It is one of the core building blocks of Microsoft Robotics Developer Studio
but has applications far beyond robotics.
&lt;span class="caps"&gt;CCR&lt;/span&gt; provides a message-passing architecture with powerful orchestration primitives
enabling the coordination of data and&amp;nbsp;work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andreas is a Senior Engineer in the Microsoft Robotics Group,
where he works on &lt;span class="caps"&gt;CCR&lt;/span&gt;, &lt;span class="caps"&gt;DSS&lt;/span&gt;, and the Visual Programming Language.
Prior to joining Microsoft,
he worked on telecommunication and interactive television products
and was a Research Assistant at Technische Universtitaet Berlin in&amp;nbsp;Germany.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2009/NWCPP-CCR.pptx"&gt;slides&lt;/a&gt;
and &lt;a class="reference external" href="/talks/2009/NWCPPDemos.zip"&gt;source code&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 21st, 2009 — Metaprogramming in D — Walter Bright</title><link href="http://nwcpp.org/january-2009.html" rel="alternate"></link><updated>2009-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2009-01-01:january-2009.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Metaprograms are programs that output other programs.
They can greatly increase the expressive power of a language.
Familiar metaprogramming languages are the C text preprocessor and C++ templates.
Walter will show how some simple language features
like string mixins and compile time function execution
can lead to powerful metaprogramming facilities,
with examples in the D programming&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright graduated from Caltech in 1979 with a degree in mechanical engineering.
He worked for Boeing for 3 years on the development of the 757 stabilizer trim system.
He then switched to writing software, in particular compilers,
and has been writing them ever since.
He&amp;#8217;s written compilers for Pascal, &lt;span class="caps"&gt;ABEL&lt;/span&gt;, C, C++, Javascript, Java,
and now the D programming&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://www.vimeo.com/4333802"&gt;video&lt;/a&gt; of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2008: No Meeting</title><link href="http://nwcpp.org/december-2008.html" rel="alternate"></link><updated>2008-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-12-01:december-2008.html</id><summary type="html"></summary></entry><entry><title>November 19th, 2008 — Things You Never Wanted to Know about Memory Fences — Bartosz Milewski</title><link href="http://nwcpp.org/november-2008.html" rel="alternate"></link><updated>2008-11-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-11-01:november-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="things-you-never-wanted-to-know-about-memory-fences-but-were-afraid-would-be-explained-to-you-anyway"&gt;
&lt;h2&gt;Things You Never Wanted to Know about Memory Fences (But were afraid would be explained to you&amp;nbsp;anyway)&lt;/h2&gt;
&lt;p&gt;Why study fences on an x86, other than to satisfy one’s curiosity?
One reason is that, even when you program in a higher-level language (C++ included),
you want to know a bit of assembly to understand some of the tradeoffs.
The other is to fight the temptation to do low-level concurrency tricks.
If you don’t appreciate the complexities of even the simplest relaxed memory model,
that of the x86,
you may be tempted to join the dark side—to feel the power of lock-free&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;I’ll analyze a simple algorithm, the Peterson lock,
which, unlike the double-checked locking pattern,
will not work on an x86 multicore without actual fences.
I’ll show how Java and C++0x deal with this&amp;nbsp;problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski has a Ph.D. in Theoretical Physics.
He published several papers on Quantum Gravity and String Theory
before he switched to programming and Computer Science.
He was project lead for the Microsoft search engine before the Internet explosion.
He published a book, &lt;em&gt;C++ In Action&lt;/em&gt;.
Bartosz keeps up with the latest developments in &lt;span class="caps"&gt;CS&lt;/span&gt;
by attending graduate courses and seminars at the &lt;span class="caps"&gt;UW&lt;/span&gt;.
He actively works on the design of the D&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/Memory_Fences.pdf"&gt;slides&lt;/a&gt; of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 15th, 2008 — Concepts in C++0X — Gary Powell</title><link href="http://nwcpp.org/october-2008.html" rel="alternate"></link><updated>2008-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-10-01:october-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;An introduction to the Standard Library and Concepts in C++0X.
A general overview, and a couple of in-depth analyses of
how to understand and use this new feature of the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Programming since &amp;#8216;74, using C++ since &amp;#8216;87.
Gary has been one of the early abusers of the C++ language and compiler
to twist it to make functional programing a reality.
A technical consultant and volunteer to the C++ standards committee since 2001
where he has worked with many others on getting
&amp;quot;bind&amp;quot;, &amp;quot;variadac templates&amp;quot;, &amp;quot;lambda&amp;quot;, &amp;quot;decl_type&amp;quot;
and other useful stuff into the C++0X standard.
A Google search of &lt;tt class="docutils literal"&gt;&amp;quot;Gary Powell&amp;quot; C++&lt;/tt&gt; will yield a large number of hits
only a few of which are not&amp;nbsp;him.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/concepts-intro.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 17th, 2008 — Functional Programming with F# — Chris Smith</title><link href="http://nwcpp.org/september-2008.html" rel="alternate"></link><updated>2008-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-09-01:september-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;With developers reaching the limits for what Object-Oriented programming can do,
they are looking for a new programming paradigm to lead to
cleaner, more elegant solutions.
Functional Programming has been around since the 1930s
but has never been able to go mainstream&amp;#8230; until now.
This talk will cover Functional Programming
and how it improves on traditional Imperative or Object-Oriented paradigms
by introducing the F# programming language,
Microsoft&amp;#8217;s latest addition to the .&lt;span class="caps"&gt;NET&lt;/span&gt;&amp;nbsp;pantheon.&lt;/p&gt;
&lt;p&gt;As for concurrency,
F# can not only build off the .&lt;span class="caps"&gt;NET&lt;/span&gt; threading libraries (which are &lt;span class="caps"&gt;OK&lt;/span&gt;)
but also introduces a concept called
&lt;a class="reference external" href="http://www.strangelights.com/blog/archive/2007/10/15/1599.aspx"&gt;Asynchronous Workflows&lt;/a&gt;,
which makes writing async code trivial.
I&amp;#8217;ll be sure to cover that in my&amp;nbsp;talk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Chris Smith is a tester at Microsoft on the F# team,
working hard to bring functional programming to the .&lt;span class="caps"&gt;NET&lt;/span&gt; community.
Before joining with F#, Chris worked on various parts of Visual Studio
from &lt;span class="caps"&gt;WCF&lt;/span&gt; support to the Settings and Resource designers.
Chris lives in the Seattle area and enjoys skiing, indoor soccer,
and blogging about F# at
&lt;a class="reference external" href="http://blogs.msdn.com/chrsmith"&gt;http://blogs.msdn.com/chrsmith&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/Functional_Programming_with_F.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 20th, 2008 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2008.html" rel="alternate"></link><updated>2008-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-08-01:august-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 16th, 2008 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2008.html" rel="alternate"></link><updated>2008-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-07-01:july-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>June 18th, 2008 — The C++ Memory Model — Bartosz Milewski</title><link href="http://nwcpp.org/june-2008.html" rel="alternate"></link><updated>2008-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-06-01:june-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;What is a memory model and why does C++ need it so badly?
I&amp;#8217;ll try to explain both the practical and the theoretical side of things.
We&amp;#8217;ll look into a few simple multithreaded idioms,
sketch the Java memory model,
and show the differences between Java and C++.
For the theoretically minded, I&amp;#8217;ll do my best to explain sequential consistency
and the &amp;quot;happens before&amp;quot; relationship necessary to describe data races.
We&amp;#8217;ll look into the C++ atomic&amp;nbsp;library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski has a Ph.D. in Theoretical Physics.
He published several papers on Quantum Gravity and String Theory
before he switched to programming and Computer Science.
He was project lead for the Microsoft search engine before the Internet explosion.
He published a book, &lt;em&gt;C++ In Action&lt;/em&gt;.
Bartosz keeps up with the latest developments in &lt;span class="caps"&gt;CS&lt;/span&gt;
by attending graduate courses and seminars at the &lt;span class="caps"&gt;UW&lt;/span&gt;.
He actively works on the design of the D&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/C___Memory_Model.pdf"&gt;slides&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=1457624331939812949"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 20th, 2008 — Enforcing Code Feature Requirements in C++ — Scott Meyers</title><link href="http://nwcpp.org/may-2008.html" rel="alternate"></link><updated>2008-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-05-01:may-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Functions often depend on particular behavioral characteristics (&amp;quot;features&amp;quot;)
of code they invoke.
For example, thread-safe code must invoke only thread-safe code
if it is to remain thread-safe,
and exception-safe code must invoke only exception-safe code.
This talk describes a technique that
enables the specification of arbitrary combinations of user-defined code features
on a per-function basis and
that detects violations of feature constraints during compilation.
The technique applies to member functions (both nonvirtual and virtual),
non-member functions, and function templates;
operators are&amp;nbsp;excluded.&lt;/p&gt;
&lt;p&gt;(This is an updated version of the talk Scott gave in April 2007.
Since then, he&amp;#8217;s revised his approach to operate entirely during compilation
and to support overloading on feature sets.
He also no longer shows film clips during the presentation&amp;nbsp;:-})&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Scott Meyers is one of the world&amp;#8217;s foremost authorities on C++;
he provides training and consulting services to clients worldwide.
He wrote the best-selling &lt;em&gt;Effective C++&lt;/em&gt; series
(&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-92488-9/"&gt;Effective C++&lt;/a&gt;,
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-63371-X/"&gt;More Effective C++&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-74962-9/"&gt;Effective &lt;span class="caps"&gt;STL&lt;/span&gt;&lt;/a&gt;);
wrote and designed the innovative
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-31015-5/"&gt;Effective C++ &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;;
is consulting editor for Addison Wesley&amp;#8217;s &lt;em&gt;Effective Software Development Series&lt;/em&gt;;
was a founding member of the Advisory Board
for &lt;a class="reference external" href="http://www.artima.com/cppsource"&gt;The C++ Source&lt;/a&gt;.
He has a Ph.D in Computer Science from Brown University.
His web site is &lt;a class="reference external" href="http://aristeia.com"&gt;aristeia.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/code_features.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=1147577226734217890"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 16th, 2008 — Programming Declaratively in C++ Using the Logic Paradigm — Roshan Naik</title><link href="http://nwcpp.org/april-2008.html" rel="alternate"></link><updated>2008-04-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-04-01:april-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The Logic paradigm (&lt;span class="caps"&gt;LP&lt;/span&gt;) is a powerful, Turing-complete programming paradigm
that has seen little representation in mainstream languages
as compared to the Object-Oriented, Imperative and Functional paradigms.
&lt;span class="caps"&gt;LP&lt;/span&gt; is an important approach in Computer Science towards
what is sometimes referred to as the Holy-Grail of programming,
&amp;quot;The user states the problem, the computer solves it&amp;quot;.
Origins of the theory underlying Logic dates back to about 300 &lt;span class="caps"&gt;B.C.
&lt;/span&gt;when Aristotle founded Formal Logic to bring rigor to logical inferencing.
The theory matured into Modern Logic more recently (early 1900s)
when Russell &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Whitehead showed that all of Mathematics could be reduced to Logic.
This talk will provide an introduction to the basics of &lt;span class="caps"&gt;LP&lt;/span&gt; in C++,
followed by examples to develop a feel for thinking
in terms of this paradigm and understand how it blends with the other paradigms.
We finally broaden the scope to see how powerful multiparadigm solutions emerge
when programmers can freely mix and match paradigms.
All code will use standard C++ and
Castor, an open source library
(available from &lt;a class="reference external" href="http://www.mpprogramming.com"&gt;www.mpprogramming.com&lt;/a&gt;)
which brings the Logic paradigm to&amp;nbsp;C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="mailto:roshan&amp;#64;mpprogramming.com"&gt;Roshan Naik&lt;/a&gt;
is an R&amp;amp;D engineer at Hewlett-Packard.
He specializes in multiparadigm programming techniques.
Roshan is also author of &lt;a class="reference external" href="http://www.mpprogramming.com"&gt;Castor&lt;/a&gt;,
an open source library which brings the Logic Paradigm to&amp;nbsp;C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/Roshan_Naik_Programming_Declaratively_In_C___using_the_Logic_Paradigm.pptx"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 19th, 2008 — shared_ptr, Or: How I Learned To Stop Worrying And Love Resource Management — Stephan T. Lavavej</title><link href="http://nwcpp.org/march-2008.html" rel="alternate"></link><updated>2008-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-03-01:march-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;shared_ptr is the most powerful addition to the Standard C++ Library
since the &lt;span class="caps"&gt;STL&lt;/span&gt; itself.
This presentation begins with an overview of shared_ptr&amp;#8217;s design
and the philosophy behind it.
Next, important uses of shared_ptr are explained in detail—shared_ptr isn&amp;#8217;t just for sharing!
Of course, new technologies come with new pitfalls.
Fortunately, shared_ptr&amp;#8217;s pitfalls, covered here, can be easily avoided.
This presentation ends with advanced topics:
thread safety, custom deleters, custom allocators, other C++0x features,
and a tour of shared_ptr&amp;#8217;s internals as implemented by Dinkumware.
Whether you haven&amp;#8217;t had a chance to use shared_ptr yet,
or you&amp;#8217;ve done everything but implement it,
this presentation should be useful to&amp;nbsp;you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Stephan T. Lavavej, who frequently uses his auspicious initials,
joined the Visual C++ Libraries team in January 2007.
He mainly works on the Standard C++ Library,
doing things like fixing epic conformance bugs and nuking iterator bloat.
Recently, he&amp;#8217;s worked with Dinkumware to integrate their &lt;span class="caps"&gt;TR1&lt;/span&gt; implementation
as part of the Visual C++ 2008 Feature&amp;nbsp;Pack.&lt;/p&gt;
&lt;p&gt;He originally joined Microsoft in July 2004,
after receiving the degree of Bachelor Of Science With Honor in Computer Science
from the California Institute Of Technology,
and worked on Outlook 2007 Search.
Among other things, he implemented hit highlighting, making stuff light up&amp;nbsp;yellow.&lt;/p&gt;
&lt;p&gt;His favorite data structure is the vector.
His second favorite data structure is the suffix tree,
which can be used to sort the suffixes of a string in linear time,
because that can be used to implement his favorite algorithm,
the Burrows-Wheeler Transform,
and also because it sounds totally&amp;nbsp;impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/nwcpp-2008.03.19.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 20th, 2008 — Memory Allocation: Either Love It or Hate It. (Or Just Think It’s OK.) — Andrei Alexandrescu</title><link href="http://nwcpp.org/february-2008.html" rel="alternate"></link><updated>2008-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-02-01:february-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Memory allocation is a problem so wicked,
many people think it&amp;#8217;s either solved or unsolvable.
This talk goes through the gory details of memory allocation;
what the classic designs are;
how special handcrafted allocators may improve (or degrade)
the bottom line performance of your application;
how to write a policy-based allocator with a modular design
that beats a monolithic handcrafted one;
and how the advent of manycores influences allocator designs.
Ninety leak-free&amp;nbsp;minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu has achieved the rare feat of becoming an authority
in both industry and research circles.
He almost single-handedly revolutionized and reinvented C++ programming
with his seminal book, &lt;em&gt;Modern C++ Design&lt;/em&gt;.
Andrei&amp;#8217;s other publications include the
award-winning &lt;em&gt;C++ Coding Standards&lt;/em&gt; book (as a coauthor),
four peer-reviewed academic papers,
and dozens of articles in top trade journals,
either under the byline of his Generic&amp;lt;Programming&amp;gt;&amp;nbsp;column,
or as a featured&amp;nbsp;author.&lt;/p&gt;
&lt;p&gt;After having worked in fields as varied as banking, databases, and Internet applications,
Andrei is focusing on graph-based statistical modeling
for natural language processing (&lt;span class="caps"&gt;NLP&lt;/span&gt;),
field rife with huge data sets,
computationally-intensive algorithms,
and massively parallel execution.
His vast expertise, presence, and humor
make Andrei a sought-after speaker at technical&amp;nbsp;conferences.&lt;/p&gt;
&lt;p&gt;Andrei holds a &lt;span class="caps"&gt;BS&lt;/span&gt; in Electrical Engineering from University &amp;quot;Politehnica&amp;quot; Bucharest
and an &lt;span class="caps"&gt;MS&lt;/span&gt; in Computer Science from University of Washington,
where he is also a graduating PhD in Summer 2008.
(&lt;span class="caps"&gt;N.B.&lt;/span&gt; He will soon be looking for a job.)
His web site is &lt;a class="reference external" href="http://erdani.com/"&gt;http://erdani.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/memory-allocation.screen.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=8718136231005757634"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 16th, 2008 — Design Patterns in an Agile Environment — Alan Shalloway</title><link href="http://nwcpp.org/january-2008.html" rel="alternate"></link><updated>2008-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-01-01:january-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns-in-an-agile-environment-the-object-pool-an-example-of-emergent-design"&gt;
&lt;h2&gt;Design Patterns in an Agile Environment – The Object Pool An Example of Emergent&amp;nbsp;Design&lt;/h2&gt;
&lt;p&gt;There runs a heated debate about how to build application architectures.
Many practitioners believe you must design up front,
others feel that doing so leads to over-design.
Unfortunately, much of this debate is based on practices, not principles.
Practices must change when one finds themselves in different contexts.
Principles do&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;This talk presents a background of several useful principles
which can help in building an application architecture dynamically.
Many modern design practices suggest that code should be developed
in a highly incremental way, with frequent opportunities for validation,
refactoring,
and that we should embrace change as an ally,
rather than seeking to avoid it through heavy analysis.
At the same time, the Design Patterns movement has opened up powerful new ways
of thinking about Objects and their relationships,
and how we can efficiently find our way
to the best designs in a given context.
Initially, these two points of view would seem to be at odds with one another.
However, layered architectures suggested by the proper use of patterns
leads to more flexible designs,
designs that tolerate change better than traditional &lt;span class="caps"&gt;OO&lt;/span&gt; would,
and patterns are a great enabler for an incremental approach.
Furthermore, we have found that refactoring existing code,
in the light of new and/or better-defined requirements,
often leads to patterns,
and that an understanding of this can make for a much more efficient development process overall.
This talk integrates these ideas
by presenting a project done by following the guidelines
of Agile development, refactoring and design&amp;nbsp;patterns.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is Lean-Agile Software&amp;nbsp;Development?&lt;/li&gt;
&lt;li&gt;What is the Role of&amp;nbsp;Architecture?&lt;/li&gt;
&lt;li&gt;What are design&amp;nbsp;patterns?&lt;/li&gt;
&lt;li&gt;What is&amp;nbsp;Refactoring?&lt;/li&gt;
&lt;li&gt;Refactoring to the Open&amp;nbsp;Closed&lt;/li&gt;
&lt;li&gt;A case study in using the methods&amp;nbsp;described&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A different view of Agile&amp;nbsp;development&lt;/li&gt;
&lt;li&gt;What Emergent Design&amp;nbsp;is&lt;/li&gt;
&lt;li&gt;What the Object-Pool Pattern&amp;nbsp;is&lt;/li&gt;
&lt;li&gt;Why following principles and practices is more important than following rote&amp;nbsp;doctrine&lt;/li&gt;
&lt;li&gt;Synthesize the seemingly disparate views of test-driven-development and design&amp;nbsp;patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This seminar is intended for those people who have some experience already
with design patterns and agile methods.
However, value should be great even without this&amp;nbsp;background.&lt;/p&gt;
&lt;p&gt;Seminar notes will be available at
&lt;a class="reference external" href="http://www.netobjectives.com/free-seminars-notes/"&gt;http://www.netobjectives.com/free-seminars-notes/&lt;/a&gt;
by January 10.
Registration on the Net Objectives site will be required to get&amp;nbsp;them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Alan Shalloway is the founder and &lt;span class="caps"&gt;CEO&lt;/span&gt; of Net Objectives.
With almost 40 years of experience,
Alan is an industry thought leader, trainer and coach
in the areas of Lean Software Development, The Lean-Agile Connection
and using Design Patterns in agile environments.
Alan has developed training and coaching methods for Lean-Agile
that have helped his clients achieve long-term, sustainable productivity gains
using the methods.
He is a popular speaker at prestigious conferences worldwide as well as a trainer/coach.
He is the primary author of
&lt;em&gt;Design Patterns Explained: A New Perspective on Object-Oriented Design&lt;/em&gt;
and is currently writing &lt;em&gt;Lean Anti-Patterns and What to do About Them&lt;/em&gt;.
He is a &lt;span class="caps"&gt;SM&lt;/span&gt;-C Trainer and has a Masters in Computer Science from &lt;span class="caps"&gt;M.I.T.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2007: No Meeting</title><link href="http://nwcpp.org/december-2007.html" rel="alternate"></link><updated>2007-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-12-01:december-2007.html</id><summary type="html"></summary></entry><entry><title>November 14th, 2007 — Domain-Specific Languages with Boost — Eric Niebler</title><link href="http://nwcpp.org/november-2007.html" rel="alternate"></link><updated>2007-11-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-11-01:november-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Designing your own programming language is fun!
It can also increase the expressiveness of your code.
But did you know that you can host your little languages right in C++?
Libraries like Boost.Spirit and the Lambda Library
do just that with the help of templates and operator overloading.
Come learn how you can easily create your own mini language-in-a-library, too.
We&amp;#8217;ll talk about Boost.Proto,
a new library that takes the pain out of working with expression&amp;nbsp;templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Eric is an independent software consultant currently working
with Dave Abrahams and Boost Consulting.
He is a former employee of Microsoft Research and Visual C++,
and his writings about C++ have been published
in the &lt;em&gt;C/C++ User&amp;#8217;s Journal&lt;/em&gt; and &lt;em&gt;&lt;span class="caps"&gt;MSDN&lt;/span&gt; Magazine&lt;/em&gt;.
When he&amp;#8217;s not writing C++ for money, Eric has been known to write C++ for&amp;nbsp;fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/proto3.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 17th, 2007 — Function Hijacking Mitigation — Walter Bright</title><link href="http://nwcpp.org/october-2007.html" rel="alternate"></link><updated>2007-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-10-01:october-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;As software becomes more complex, we become more reliant on module interfaces.
An application may import and combine modules from multiple sources,
including sources from outside the company.
The module developers must be able to maintain and improve those modules
without inadvertently stepping on the behavior of modules
over which they cannot have knowledge of.
The application developer needs to be notified
if any module changes would break the application.
This talk covers function hijacking,
where adding innocent and reasonable declarations in a module
can wreak arbitrary havoc on an application program in C++ and Java.
We&amp;#8217;ll then look at how modest language design changes
can largely eliminate the problem in the D programming&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright&amp;#8217;s first major program was the groundbreaking wargame Empire.
He then became interested in compilers and computer languages.
He&amp;#8217;s written compilers for &lt;span class="caps"&gt;ABEL&lt;/span&gt;, Pascal, C, C++, Java, Javascript, and now D.
His extensive experience writing C++ compilers
and well over a decade being on the front lines of doing C++ customer support
is an ideal background for improving on the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/FunctionHijack.html"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 19th, 2007 — Machine Architecture: Things Your Programming Language Never Told You — Herb Sutter</title><link href="http://nwcpp.org/september-2007.html" rel="alternate"></link><updated>2007-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-09-01:september-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;High-level languages insulate the programmer from the machine.
That’s a wonderful thing—except when it obscures the answers
to the fundamental questions of
“What does the program do?” and “How much does it&amp;nbsp;cost?”&lt;/p&gt;
&lt;p&gt;The C++/C#/Java programmer is less insulated than most,
and still we find that programmers are consistently surprised
at what simple code actually does and how expensive it can be—not because of any complexity of a language,
but because of being unaware of the complexity
of the machine on which the program actually&amp;nbsp;runs.&lt;/p&gt;
&lt;p&gt;This talk examines the “real meanings” and “true costs” of the code we write and run
especially on commodity and server systems,
by delving into the performance effects of bandwidth vs. latency limitations,
the ever-deepening memory hierarchy,
the changing costs arising from the hardware concurrency explosion,
memory model effects all the way from the compiler
to the &lt;span class="caps"&gt;CPU&lt;/span&gt; to the chipset to the cache, and more—and what you can do about&amp;nbsp;them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://herbsutter.com/"&gt;Herb Sutter&lt;/a&gt; is a software architect at Microsoft
and chair of the &lt;span class="caps"&gt;ISO&lt;/span&gt; C++ standards committee.
Among his books and papers on software development
is the widely-cited article &amp;quot;The Free Lunch Is Over&amp;quot;
where he coined the title phrase and &amp;quot;concurrency revolution&amp;quot;
as applied to describe the software sea change
now in progress to exploit increasingly parallel&amp;nbsp;hardware&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/Machine_Architecture_-_NWCPP.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=-4714369049736584770"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 15th, 2007 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2007.html" rel="alternate"></link><updated>2007-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-08-01:august-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 18th, 2007 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2007.html" rel="alternate"></link><updated>2007-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-07-01:july-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;TBD&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>June 20th, 2007 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/june-2007.html" rel="alternate"></link><updated>2007-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-06-01:june-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 23rd, 2007 — The Zero Debugger — Cristian Vlasceanu</title><link href="http://nwcpp.org/may-2007.html" rel="alternate"></link><updated>2007-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-05-01:may-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In this presentation, I&amp;nbsp;will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;overview the debugging support provided at the &lt;span class="caps"&gt;OS&lt;/span&gt; level on Linux,
how limitations in the design impacts debugger&amp;nbsp;architecture&lt;/li&gt;
&lt;li&gt;share with the group my experience in implementing a C++ debugger on&amp;nbsp;Linux&lt;/li&gt;
&lt;li&gt;underline the power of adding a scripting language to a debugger,
and shine the light on the Boost.Python&amp;nbsp;library&lt;/li&gt;
&lt;li&gt;Extending debugger support to other languages, namely Walter Bright&amp;#8217;s&amp;nbsp;D.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I found that debugger architecture lends itself well to the paradigms of C++.
I may give some examples;
however there is not enough time to outline the complete architecture
at the C++ source level of&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;And last but not least&amp;#8230;
&lt;span class="caps"&gt;DISCLAIMER&lt;/span&gt;: I am not interested in talking about
the political aspects of Linux / OpenSource / &lt;span class="caps"&gt;GPL&lt;/span&gt; in this setting.
I intend to keep the discussion rather&amp;nbsp;technical.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;The Zero debugger was created by Cristian Vlasceanu.
He works on custom interpreters and language translators in his daytime job,
and hacks Zero at&amp;nbsp;night.&lt;/p&gt;
&lt;p&gt;Cristian is a lifelong friend of Andrei Alexandrescu
and has programmed in&amp;nbsp; C++ for over a decade.
He suggested the name Loki for the C++ library described
in the ground breaking book &lt;em&gt;Modern C++ Design&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After spending a couple of years in Atlanta,
Cristian has moved to Seattle and has lived in the Pacific Northwest since&amp;nbsp;2000.&lt;/p&gt;
&lt;p&gt;Cristian has written a couple of technical articles
for the now defunct &lt;em&gt;C/C++ Users Journal&lt;/em&gt;,
blogs infrequently, and is a veteran of Amazon.com and&amp;nbsp;RealNetworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/anatomy_of_zero.pdf"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 25th, 2007 — Red Code, Green Code:  Generalizing const — Scott Meyers</title><link href="http://nwcpp.org/april-2007.html" rel="alternate"></link><updated>2007-04-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-04-01:april-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;C++ compilers allow non-const code to call const code,
but going the other way requires a cast.
In this talk, Scott describes an approach
he&amp;#8217;s been pursuing to generalize this notion to arbitrary criteria.
For example, thread-safe code should only call other thread-safe code
(unless you explicitly permit it on a per-call basis).
Ditto for exception-safe code,
code not &amp;quot;contaminated&amp;quot; by some open source license,
or any other constraint you choose.
The approach is based on template metaprogramming (&lt;span class="caps"&gt;TMP&lt;/span&gt;),
and the implementation uses the Boost metaprogramming library (Boost.&lt;span class="caps"&gt;MPL&lt;/span&gt;),
so constraint violations are,
wherever possible, detected during&amp;nbsp;compilation.&lt;/p&gt;
&lt;p&gt;Topics likely to be mentioned during the talk include Hellen Keller,
namespaces, multiple inheritance, Barton and Nackman, enable_if,
traits, &lt;span class="caps"&gt;TMP&lt;/span&gt; debugging, &lt;span class="caps"&gt;VC8&lt;/span&gt; ICEs, &lt;span class="caps"&gt;MPL&lt;/span&gt; bugs, dancing bears, &lt;span class="caps"&gt;NVI&lt;/span&gt;,
metaprogrammer Hell, Captain Kirk, Acyclic Visitor, Scopeguard,
External Polymorphism, and prayer.
Possibly also Vista, Google, and&amp;nbsp;Lenovo.&lt;/p&gt;
&lt;p&gt;Scott will show proof-of-concept code that, so far as he can tell, actually&amp;nbsp;works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Scott Meyers is one of the world&amp;#8217;s foremost authorities on C++;
he provides training and consulting services to clients worldwide.
He wrote the best-selling &lt;em&gt;Effective C++&lt;/em&gt; series
(&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-92488-9/"&gt;Effective C++&lt;/a&gt;,
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-63371-X/"&gt;More Effective C++&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-74962-9/"&gt;Effective &lt;span class="caps"&gt;STL&lt;/span&gt;&lt;/a&gt;);
wrote and designed the innovative
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-31015-5/"&gt;Effective C++ &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;;
is consulting editor for Addison Wesley&amp;#8217;s &lt;em&gt;Effective Software Development Series&lt;/em&gt;;
and serves on the Advisory Board for &lt;a class="reference external" href="http://www.artima.com/cppsource"&gt;The C++ Source&lt;/a&gt;.
He has a Ph.D in Computer Science from Brown University.
His web site is &lt;a class="reference external" href="http://aristeia.com"&gt;aristeia.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/redcode_-_updated.pdf"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=-4728145737208991310&amp;amp;hl=en"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 21st, 2007 — Software Transactional Memory: A different approach to concurrency — Bartosz Milewski</title><link href="http://nwcpp.org/march-2007.html" rel="alternate"></link><updated>2007-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-03-01:march-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 40&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Traditional approach to multi-threaded programming,
for which I have coined the nickname &amp;quot;deadlock-oriented programming&amp;quot;,
suffers from a major flaw—it&amp;#8217;s not composable.
If you try to perform operations on multiple lockable objects,
you run into the risk of deadlocks, livelocks,
priority inversions, and other assorted&amp;nbsp;plagues.&lt;/p&gt;
&lt;p&gt;Software Transactional Memory, &lt;span class="caps"&gt;STM&lt;/span&gt;, promises to solve those problems
once and for all.
Under the covers it works like lock-free programming on steroids,
but to the programmer, it is a&amp;nbsp;no-brainer.&lt;/p&gt;
&lt;p&gt;I will discuss general ideas behind &lt;span class="caps"&gt;STM&lt;/span&gt; as well as some concrete&amp;nbsp;implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz has his roots in theory
(Ph.D. in theoretical particle physics)
and his branches in programming practice
(eight years at Microsoft and then his own little software firm).
His current activities, outside of his company,
include graduate study at the &lt;span class="caps"&gt;UW&lt;/span&gt;,
partaking in the design of D,
and (secretly) writing a book on Windows in D.
He&amp;#8217;s also the author of &lt;em&gt;C++ in Action&lt;/em&gt;, Addison-Wesley,&amp;nbsp;2001.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/Bartosz/index.html"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 21st, 2007 — Text Processing with Boost — Eric Niebler</title><link href="http://nwcpp.org/february-2007.html" rel="alternate"></link><updated>2007-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-02-01:february-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The abysmal support in the C and C++ standard libraries
for string handling has driven many programmers
to other languages like Perl and Python.
Boost aims to reverse that trend.
Libraries such as &lt;tt class="docutils literal"&gt;Boost.Lexical_cast&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Boost.String_algo&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Boost.Regex&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Boost.Xpressive&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Boost.Spirit&lt;/tt&gt;
are invaluable tools for slicing and dicing strings.
If your task is as simple as turning an integer into a string,
or as&amp;nbsp; complicated as developing a parser generator for a new scripting&amp;nbsp; language,
Boost has a library that can help.
In addition to covering&amp;nbsp; all the afore mentioned libraries from a user&amp;#8217;s perspective,
we&amp;#8217;ll&amp;nbsp; also look at how Boost can be used to get more out of the standard&amp;nbsp; IOstreams,
and discover some hidden gems in Boost for dealing with&amp;nbsp;Unicode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Eric is an independent software consultant currently working
with Dave Abrahams and Boost Consulting.
He is a former employee of Microsoft Research and Visual C++,
and his writings about C++ have been published
in the &lt;em&gt;C/C++ User&amp;#8217;s Journal&lt;/em&gt; and &lt;em&gt;&lt;span class="caps"&gt;MSDN&lt;/span&gt; Magazine&lt;/em&gt;.
When he&amp;#8217;s not writing C++ for money, Eric has been known to write C++ for&amp;nbsp;fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/Text_Processing_With_Boost.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=3723782552647089226&amp;amp;hl=en"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 17th, 2007 — Advanced D Programming Language Features — Walter Bright</title><link href="http://nwcpp.org/january-2007.html" rel="alternate"></link><updated>2007-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2007-01-01:january-2007.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This talk assumes you&amp;#8217;re bored with the usual macguffins—expressions, statements, and core strings vs library strings.
We&amp;#8217;ll skip right to the naughty bits—lambdas, mixins, tuples, scope guards, lazy arguments, and static if&amp;#8217;s.
What are they, and what they are good for, will be&amp;nbsp;explored.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright&amp;#8217;s first major program was the groundbreaking wargame Empire.
He then became interested in compilers and computer languages.
He&amp;#8217;s written compilers for &lt;span class="caps"&gt;ABEL&lt;/span&gt;, Pascal, C, C++, Java, Javascript, and now D.
His extensive experience writing C++ compilers
and well over a decade being on the front lines of doing C++ customer support
is an ideal background for improving on the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2007/AdvancedD.html"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=-7073020265668105471"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2006: No Meeting</title><link href="http://nwcpp.org/december-2006.html" rel="alternate"></link><updated>2006-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-12-01:december-2006.html</id><summary type="html"></summary></entry><entry><title>November 15th, 2006 — What makes a Good Programmer? Things they never told you — Adair Dingle</title><link href="http://nwcpp.org/november-2006.html" rel="alternate"></link><updated>2006-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-11-01:november-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 40&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Time constraints and demands for breadth constrain academic instruction.
Job experience fills in the gap between theory and practice.
Here we discuss some circumvented hurdles
(representation, resource management, failures)
as well as key characteristics of students who succeed as&amp;nbsp;professionals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Adair Dingle has over 15 years of teaching experience.
Currently an associate professor of Computer Science at Seattle University,
she annually supervises capstone projects
where seniors develop software products for industry sponsors.
Between undergraduate and graduate studies,
Adair worked in industry for 3 years as a software developer.
Recently, she co-authored (with software consultant Tom Hildebrandt)
&lt;em&gt;C++: Memory First&lt;/em&gt;, a text for immediate-level programmers
exploring background processes critical to software&amp;nbsp;design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2006/NWCPP1106.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch a &lt;a class="reference external" href="http://video.google.com/videoplay?docid=-3746958180505089789&amp;amp;q=nwcpp"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 18th, 2006 — The Cost of C++ Exception Handling on Windows — Kevin Frei</title><link href="http://nwcpp.org/october-2006.html" rel="alternate"></link><updated>2006-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-10-01:october-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 40&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a long running emotional battle over C++ exception handling.
Rather than argue for or against either side,
I&amp;#8217;ll be going into low-level detail of
how much it costs to use on Windows for both x86 and &lt;span class="caps"&gt;AMD64&lt;/span&gt;.
This should help people see through the emotion
and get a real handle on what it costs,
and provide them with facts to help make the decisions
of why, how, and when C++ exceptions should or should not be&amp;nbsp;used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been at &lt;span class="caps"&gt;MSFT&lt;/span&gt; for 9 years,
working on the compiler back end/optimizer the entire time.
I&amp;#8217;m currently responsible for the Orcas optimizer, linker, and other &amp;#8216;tools&amp;#8217;
while the rest of the team works on the &amp;quot;Phoenix&amp;quot;&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;Prior to my life at Microsoft, I graduated from the University of Utah with a &lt;span class="caps"&gt;BS&lt;/span&gt; in &lt;span class="caps"&gt;CS&lt;/span&gt;.
I have a wife &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 3 kids, enjoy playing with my kids,
woodworking, mountain biking, writing goofy projects to learn new technologies,
and wasting time in front of a variety of video&amp;nbsp;games.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2006/ehc.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch a &lt;a class="reference external" href="http://video.google.com/videoplay?docid=9169999597330548749&amp;amp;hl=en"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 13th, 2006 — The Concur Project — Herb Sutter</title><link href="http://nwcpp.org/september-2006.html" rel="alternate"></link><updated>2006-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-09-01:september-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-concur-project-some-experimental-concurrency-abstractions-for-imperative-languages"&gt;
&lt;h2&gt;The Concur Project: Some Experimental Concurrency Abstractions for Imperative&amp;nbsp;Languages&lt;/h2&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Herb Sutter is a software architect at Microsoft
and chair of the &lt;span class="caps"&gt;ISO&lt;/span&gt; C++ standards committee.
Among his books and papers on software development
is the widely-cited article &amp;quot;The Free Lunch Is Over&amp;quot;
where he coined the title phrase and &amp;quot;concurrency revolution&amp;quot;
as applied to describe the software sea change
now in progress to exploit increasingly parallel&amp;nbsp;hardware.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2006/The_Concur_Project_-_NWCPP.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch a &lt;a class="reference external" href="http://video.google.com/videoplay?docid=7625918717318948700&amp;amp;q=herb+sutter"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 16th, 2006 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2006.html" rel="alternate"></link><updated>2006-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-08-01:august-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.georgeanddragonpub.com/"&gt;The George &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Dragon Pub&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;206 North 36th St&lt;/div&gt;
&lt;div class="line"&gt;Seattle, &lt;span class="caps"&gt;WA&lt;/span&gt; 98103&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 19th, 2006 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2006.html" rel="alternate"></link><updated>2006-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-07-01:july-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.georgeanddragonpub.com/"&gt;The George &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Dragon Pub&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;206 North 36th St&lt;/div&gt;
&lt;div class="line"&gt;Seattle, &lt;span class="caps"&gt;WA&lt;/span&gt; 98103&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>June 21st, 2006 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/june-2006.html" rel="alternate"></link><updated>2006-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-06-01:june-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 17th, 2006 — The Power of None — Andrei Alexandrescu</title><link href="http://nwcpp.org/may-2006.html" rel="alternate"></link><updated>2006-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-05-01:may-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Exceptions. The final frontier.
We wanted to understand them.
We thought we&amp;#8217;ll love them, but they&amp;#8217;ve lacerated our code.
We hated them.
We tried to do without them.
We couldn&amp;#8217;t because they kept on throwing themselves at us.
In bitworld, exceptions might have cast upon us the closest analogy
to a love-hate, abusive, co-dependent&amp;nbsp;relationship.&lt;/p&gt;
&lt;p&gt;This talk has two purposes.
First purpose is group therapy.
We will try to explain through a dialog linking cause to effect,
why things are the way they are.
Second, we discuss how to escape the abuse cycle
by summoning an unexpected ally: the type system.
Come one, come all for one cathartic&amp;nbsp;hour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is a graduate student at the University of Washington in Seattle,
working on the lean and mean speech recognition machine
that we all know (since 1960) will be completed within 5 years.
In the C++ community, Andrei is best known
for his best-selling (and tuition-paying) books,
&lt;em&gt;Modern C++ Design&lt;/em&gt; and &lt;em&gt;C++ Coding Standards&lt;/em&gt;,
the latter coauthored with Herb Sutter.
Andrei has also published numerous articles
on software design and implementation using C++,
and in spite of his accent is a sought-after speaker at numerous conferences worldwide.
His website is &lt;a class="reference external" href="http://www.erdani.org"&gt;www.erdani.org&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/The_Power_of_None.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 19th, 2006 — C++ on Next-Gen Consoles: Effective Code for New Architectures — Pete Isensee</title><link href="http://nwcpp.org/april-2006.html" rel="alternate"></link><updated>2006-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-04-01:april-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;At &lt;span class="caps"&gt;GDC&lt;/span&gt; 2005, Chris Hecker stated that average game code
is going to run slower on next-generation consoles than on the current generation.
In many ways, he’s right.
Programmers accustomed to having &lt;span class="caps"&gt;CPU&lt;/span&gt; silicon
devoted to out-of-order execution units and instruction pipelining
are in for a rude awakening.
A few brave souls will turn to assembly language optimizations,
but what about the rest of us who use C++ on a daily basis?
This talk is for you.
Find out how to write C++ code that runs like a dream on next-generation&amp;nbsp;consoles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Pete has been programming in the game industry for 10 years.
He has shipped titles ranging from adventure stories to online games,
working on everything from Macs to consoles.
He is currently a lead engineer with the Xbox Advanced Technology Group.
He has a degree in computer engineering
and was a C++ template geek long before compilers knew what to make of functors and&amp;nbsp;traits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.cmpevents.com/sessions/GD/S1549i1.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 15th, 2006 — Functional Programming in C++ using Boost.Lambda — Bartosz Milewski</title><link href="http://nwcpp.org/march-2006.html" rel="alternate"></link><updated>2006-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-03-01:march-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The power of &lt;span class="caps"&gt;STL&lt;/span&gt; is partially due to its embracing elements of functional programming.
Algorithms implemented in &lt;span class="caps"&gt;STL&lt;/span&gt;, such as &lt;tt class="docutils literal"&gt;for_each&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;accumulate&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;find&lt;/tt&gt;, etc.,
have functional customization points.
You can customize them by providing your own function objects—be it a pointer to a function, a functor object, or a predicate object.
Unfortunately, &lt;span class="caps"&gt;STL&lt;/span&gt; provides very limited (and syntactically awkward)
support for creating and combining function&amp;nbsp;objects.&lt;/p&gt;
&lt;p&gt;C++ programmers have been eying lambda calculus with envy for some time now.
Several libraries have been proposed that implement elements of lambda calculus
using template metaprogramming in C++,
one of them being Boost.Lambda.
With these facilities, you can easily create and manipulate function objects on the fly.
What&amp;#8217;s more important, you can then pass such objects to &lt;span class="caps"&gt;STL&lt;/span&gt; algorithms to tap their full&amp;nbsp;power.&lt;/p&gt;
&lt;p&gt;The slides for this talk were created by David Abrahams and Eric&amp;nbsp;Niebler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz is a theoretical physicist turned programmer.
He is the author of &lt;em&gt;C++ In Action&lt;/em&gt;, published by Addison-Wesley in 2001.
He founded &lt;a class="reference external" href="http://www.relisoft.com"&gt;Reliable Software &lt;span class="caps"&gt;LLC&lt;/span&gt;&lt;/a&gt; in 1996
to get first-hand experience in creating and maintaining a large software project—a version-control system called Code Co-op.
Studying complexity is his main&amp;nbsp;interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/Customization_Points_and_Polymorphism.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 15th, 2006 — The Phoenix Compiler and Tools Framework — Andy Ayers</title><link href="http://nwcpp.org/february-2006.html" rel="alternate"></link><updated>2006-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-02-01:february-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-phoenix-compiler-and-tools-framework-built-from-building-and-building-on-c-cli"&gt;
&lt;h2&gt;The Phoenix Compiler and Tools Framework: Built From, Building, and Building On C++/&lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Phoenix, Microsoft&amp;#8217;s next generation compiler and tools framework,
is built entirely in C++/&lt;span class="caps"&gt;CLI&lt;/span&gt;.
Phoenix&amp;#8217;s design leverages both the traditional strengths of C++
and the innovative features of &lt;span class="caps"&gt;CLI&lt;/span&gt; binding.
The Phoenix framework&amp;#8217;s flexible, and extensible components
make extensive use of &lt;span class="caps"&gt;CLI&lt;/span&gt; features like ref classes, properties, events, and delegates.
We&amp;#8217;ll demonstrate how C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; enables Phoenix
to produce not only powerful compiler and jit components
that will help implement and optimize C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; programs
but also produce novel and efficient tools for
C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; program analysis, understanding, and&amp;nbsp;manipulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andy is an Architect and Dev Lead on the Microsoft Phoenix Project.
He joined Microsoft in 2002.
Andy has created program analysis tools at InCert Software
and written optimizing compilers at Hewlett Packard.
His fascination with the challenges C++ presents to language implementers
dates back to his days as a graduate student at &lt;span class="caps"&gt;MIT&lt;/span&gt; in the late&amp;nbsp;1980&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/Ayers_NWCPP_Talk.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 18th, 2006 — Policy-Based Memory Allocation — Andrei Alexandrescu</title><link href="http://nwcpp.org/january-2006.html" rel="alternate"></link><updated>2006-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2006-01-01:january-2006.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Traditionally, memory allocation is approached as a monolithic, rigid design
influenced by a performance-minded implementation.
However, compile-time C++ techniques can yield
a highly flexible and configurable design
with the same performance profile
as equivalent hand-implemented designs.
This talk describes work by Emery Berger and others
who have designed and implemented a policy-based&amp;nbsp;allocator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is working on a graduate degree
at the University of Washington in Seattle,
specializing in automatic speech recognition.
In the C++ community, Andrei is best known for his books &lt;em&gt;Modern C++ Design&lt;/em&gt;
and &lt;em&gt;C++ Coding Standards&lt;/em&gt; (the latter coauthored with Herb Sutter).
Andrei is also a columnist for &lt;em&gt;C/C++ Users Journal&lt;/em&gt;,
a C++ former columnist for the &lt;em&gt;C++ Report&lt;/em&gt;,
a guest speaker at numerous conferences,
and one of the featured instructors of
&lt;a class="reference external" href="http://www.thecppseminar.com"&gt;The C++ Seminar&lt;/a&gt;).
His website is &lt;a class="reference external" href="http://www.erdani.com"&gt;www.erdani.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2006/ChromedMetal.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2005: No Meeting</title><link href="http://nwcpp.org/december-2005.html" rel="alternate"></link><updated>2005-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-12-01:december-2005.html</id><summary type="html"></summary></entry><entry><title>November 16th, 2005 — The D Programming Language — Walter Bright</title><link href="http://nwcpp.org/november-2005.html" rel="alternate"></link><updated>2005-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-11-01:november-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Is it possible to have the power and efficiency of C++,
but in a much easier to use form?
Walter will contrast C++ and D
and show how, with D, one can achieve the same or better results
with much less complexity and with greater reliability,
without sacrificing&amp;nbsp;performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright&amp;#8217;s first major program was the groundbreaking wargame Empire.
He then became interested in compilers and computer languages.
He&amp;#8217;s written compilers for &lt;span class="caps"&gt;ABEL&lt;/span&gt;, Pascal, C, C++, Java, Javascript, and now D.
His extensive experience writing C++ compilers
and well over a decade being on the front lines of doing C++ customer support
is an ideal background for improving on the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 19th, 2005 — C++ in the Trenches — David Brownell</title><link href="http://nwcpp.org/october-2005.html" rel="alternate"></link><updated>2005-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-10-01:october-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;A presentation almost 20 years in the making!
In this meeting, David Brownell will share a grab bag of C++ tips and tricks
he has learned after 19 years of programming experience.
Topics include designing with a design in mind, partnering with the compiler,
handling errors without error,
and other techniques that can be incorporated immediately into existing&amp;nbsp;code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;David Brownell is the founder of &lt;a class="reference external" href="http://www.WiseRiddles.com"&gt;Wise Riddles Software&lt;/a&gt;—a product development and consulting company—and has been using C++ for the past 9 years.
Graduating from Seattle University in 1998,
David has worked on voice recognition software, peer-to-peer applications,
secure communications technologies, automated scripting utilities,
generic programming techniques, and faxing applications.
David currently serves as president for the Northwest C++ Users&amp;#8217;&amp;nbsp;Group.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/C__InTheTrenches.pdf"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 21st, 2005 — Two Views of C++ — Scott Meyers</title><link href="http://nwcpp.org/september-2005.html" rel="alternate"></link><updated>2005-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-09-01:september-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract-two-views-of-c"&gt;
&lt;h2&gt;Abstract: Two Views of&amp;nbsp;C++&lt;/h2&gt;
&lt;p&gt;In 2002, Bertrand Meyer, inventor of Eiffel,
asked me to give a talk on C++ at &lt;span class="caps"&gt;ETH&lt;/span&gt; in Zurich,
where he is a member of the Software Engineering faculty.
Meyer is a well-known C++-hater, so the choice of topic was a delicate one.
I ultimately decided to give two mini-talks,
one making C++ look bad and one making it look&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;The two talks&amp;nbsp;are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The meaning of &amp;#8216;f(x)&amp;#8217; in C++,&amp;quot; an exploration of the rules for
function overloading, template instantiation, template specialization,
and the semantic mess that results from their&amp;nbsp;interactions.&lt;/li&gt;
&lt;li&gt;&amp;quot;Dimensional Analysis in C++,&amp;quot; a purely compile-time approach to
making sure that physical quantities (e.g., mass, velocity, distance, etc.)
are used consistently in C++&amp;nbsp;programs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ll also be plugging the third edition of &lt;em&gt;Effective C++,&lt;/em&gt; reminding
everyone that they should own &lt;em&gt;n&lt;/em&gt;+2 copies, where &lt;em&gt;n&lt;/em&gt; is the number of cars they own:
1 for home, 1 for work, and &lt;em&gt;n&lt;/em&gt; for reading when they are stuck in&amp;nbsp;traffic.&lt;/p&gt;
&lt;p&gt;I may also show slides of recent trips I&amp;#8217;ve taken to China and India.
Or maybe of our new dog, Darla.
Maybe even video.
Whatever.
We&amp;#8217;ll see&amp;nbsp;:-)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Scott Meyers is one of the world&amp;#8217;s foremost experts on C++ software development.
He wrote the best-selling &lt;em&gt;Effective C++&lt;/em&gt; series
(&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-92488-9/"&gt;Effective C++&lt;/a&gt;,
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-63371-X/"&gt;More Effective C++&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-74962-9/"&gt;Effective &lt;span class="caps"&gt;STL&lt;/span&gt;&lt;/a&gt;);
wrote and designed the innovative
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-31015-5/"&gt;Effective C++ &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;;
is consulting editor for Addison Wesley&amp;#8217;s &lt;em&gt;Effective Software Development Series&lt;/em&gt;;
and is a member of the advisory board for
&lt;a class="reference external" href="http://www.sdmagazine.com/"&gt;Software Development&lt;/a&gt; magazine.
He also sits on technical advisory boards for several start-up companies.
A programmer since 1972, he holds an &lt;span class="caps"&gt;M.S.&lt;/span&gt; in Computer Science from Stanford University
and a Ph.D. from Brown&amp;nbsp;University.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/twoViews.pdf"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 17th, 2005 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2005.html" rel="alternate"></link><updated>2005-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-08-01:august-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 20th, 2005 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2005.html" rel="alternate"></link><updated>2005-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-07-01:july-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>June 15th, 2005 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/june-2005.html" rel="alternate"></link><updated>2005-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-06-01:june-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring &lt;strong&gt;cash&lt;/strong&gt; for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 18th, 2005 — Writing safer code with the Visual C++ 8.0 Libraries — Martyn Lovell</title><link href="http://nwcpp.org/may-2005.html" rel="alternate"></link><updated>2005-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-05-01:may-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Over the past 5 years,
Microsoft has conducted extensive and detailed security reviews
and upgrades of its very large code bases.
We’ve learnt a lot about how to build safer code,
and in Visual C++ 8.0, we’re applying that to the Visual C++ Libraries
to help protect against classic security problems (such as buffer overruns).
The Standard C Library includes many venerable functions with security problems.
Visual C++ 8.0 includes a full revamp of this library to help programmers
build safer code with minimal source changes.
The Standard C++ library provides a clean and simple abstraction
for algorithms, iterators and containers that provides much better protection
than the traditional C library.
We extended our implementation of the Standard C++ Libraries to
try to make them apply, by default,
the lessons we’ve learnt from reviewing our code.
The result is a much safer implementation of the Standard Libraries
with only a small amount of reduced functionality.
This talk describes the changes made and their impact on application code,
as well as some of the internals of the&amp;nbsp;implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Martyn Lovell is the Development Lead on the Visual C++ Libraries Team,
which is responsible for the C and C++ runtime libraries, &lt;span class="caps"&gt;MFC&lt;/span&gt;, &lt;span class="caps"&gt;ATL&lt;/span&gt;,
&lt;span class="caps"&gt;STL&lt;/span&gt;/&lt;span class="caps"&gt;CLR&lt;/span&gt; and other libraries supporting managed code development in C++.
His recent focus has been security in the standard libraries,
and support for mixing managed and native code in a single program.
As a long-standing member of the developer tools division,
he has worked on a broad range of features.
These include architecture, design and implementation for:
the extensibility of the Visual Studio Shell;
source control and Visual SourceSafe;
source control integration and other team development features;
the Visual Studio Analyzer infrastructure and user interface;
the common development shell;
web development;
and the Visual Studio user interface.
He is a frequent speaker at TechEd and other conferences,
and a regular contributor to online&amp;nbsp;communities.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/Secure_NWCPP_May_2005.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 20th, 2005 — xpressive regular expressions: Library design at the edge — Eric Niebler</title><link href="http://nwcpp.org/april-2005.html" rel="alternate"></link><updated>2005-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-04-01:april-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Another C++ regular expression library? Hasn&amp;#8217;t it all been done?&amp;nbsp;No!&lt;/p&gt;
&lt;p&gt;xpressive pushes the boundaries of compile-time and run-time interaction.
Regular expressions can be written either as a string to be parsed at runtime,
or as an expression template parsed (and optimized!) at compile time.
In this talk, Eric will discuss library design at the compile-time/run-time boundary,
and the interesting possibilities such a design makes&amp;nbsp;possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Eric is an independent software consultant currently working
with Dave Abrahams and Boost Consulting.
He is a former employee of Microsoft Research and Visual C++,
and his writings about C++ have been published
in the &lt;em&gt;C/C++ User&amp;#8217;s Journal&lt;/em&gt; and &lt;em&gt;&lt;span class="caps"&gt;MSDN&lt;/span&gt; Magazine&lt;/em&gt;.
When he&amp;#8217;s not writing C++ for money, Eric has been known to write C++ for&amp;nbsp;fun.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/xpressive.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 23rd, 2005 — Evolving C++ onto the CLI — Stan Lippman</title><link href="http://nwcpp.org/march-2005.html" rel="alternate"></link><updated>2005-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-03-01:march-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;11820 Northup Way #E200&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington 98005&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;C++ reflects a static object model optimized for executable speed and&amp;nbsp;size.&lt;/p&gt;
&lt;p&gt;This has made it the language of choice for systems programming.
The Common Language Infrastructure (&lt;span class="caps"&gt;CLI&lt;/span&gt;) represents a dynamic object model
optimized for flexibility and security.
C++ programmers wishing to inhabit the &lt;span class="caps"&gt;CLI&lt;/span&gt; development space until now
have had to leave C++ and generally work in C# (or Java).
In this talk, I&amp;#8217;ll discuss our evolution of C++
to adapt to the &lt;span class="caps"&gt;CLI&lt;/span&gt; programming environment,
and couch it in a more general look at program language lifetimes
and suggest some possible future&amp;nbsp;directions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Stan Lippman is Architect with the Visual C++ team at Microsoft.
He began working on C++ with its inventor Bjarne Stroustrup back in 1984
within Bell Laboratories.
In between, he worked in Feature Animation at Disney and DreamWorks,
was a Distinguished Consultant with &lt;span class="caps"&gt;JPL&lt;/span&gt;,
and was a Software Technical Director on Fantasia 2000.
He is the author of &lt;em&gt;C++ Primer, 4e&lt;/em&gt; (2005) and &lt;em&gt;Inside the C++ Object Model&lt;/em&gt;.
For the last three years,
he has been involved in the work to adapt C++ onto the &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/EvolvingC___Short.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 9th, 2005 — Dealing with Software Complexity — Bartosz Milewski</title><link href="http://nwcpp.org/february-2005.html" rel="alternate"></link><updated>2005-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-02-01:february-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.humongous.com"&gt;Humongous Entertainment&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;3855 Monte Villa Parkway&lt;/div&gt;
&lt;div class="line"&gt;Bothell, Washington 98021&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;One of the big problems in software development
is that a lot of energy is spent on understanding existing code,
whether it was written by other programmers or by the current developer long time ago.
Bartosz will argue that a large part of code analysis can be automated
using exotic new techniques inspired by biology, cellular automata,
document processing, and&amp;nbsp;more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz is a theoretical physicist turned programmer.
He is the author of the book, &lt;em&gt;C++ In Action&lt;/em&gt;, published by Addison-Wesley in 2001.
He founded &lt;a class="reference external" href="http://www.relisoft.com"&gt;Reliable Software &lt;span class="caps"&gt;LLC&lt;/span&gt;&lt;/a&gt; in 1996
to get first-hand experience in creating and maintaining
a large software project—a version-control system called Code Co-op.
Studying complexity is his main&amp;nbsp;interest.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/Complexity.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 12th, 2005 — Lock-Free Programming — Andrei Alexandrescu</title><link href="http://nwcpp.org/january-2005.html" rel="alternate"></link><updated>2005-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2005-01-01:january-2005.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.humongous.com"&gt;Humongous Entertainment&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;3855 Monte Villa Parkway&lt;/div&gt;
&lt;div class="line"&gt;Bothell, Washington 98021&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;With the increase of processor clock speeds hitting a snag,
we&amp;#8217;re facing yet another silent revolution
in processor architecture and programming style.
Forget about writing lousy, inefficient code and
then taking six months off to let Moore&amp;#8217;s law catch up.
Once again the heydays of efficient code are up,
and with the new multicore, massively parallel architectures,
threads are the way to go.
This talk presents the newest, hottest, and most addictive multithreaded technique in town:
lock-free&amp;nbsp;programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is working on a graduate degree
at the University of Washington in Seattle,
specializing in automatic speech recognition.
In the C++ community, Andrei is best known for his books &lt;em&gt;Modern C++ Design&lt;/em&gt;
and &lt;em&gt;C++ Coding Standards&lt;/em&gt; (the latter coauthored with Herb Sutter).
Andrei is also a columnist for &lt;em&gt;C/C++ Users Journal&lt;/em&gt;, a C++ former
columnist for the &lt;em&gt;C++ Report&lt;/em&gt;, a guest speaker at numerous conferences,
and one of the featured instructors of
&lt;a class="reference external" href="http://www.thecppseminar.com"&gt;The C++ Seminar&lt;/a&gt;).
His website is &lt;a class="reference external" href="http://www.moderncppdesign.com"&gt;www.moderncppdesign.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2005/Lock-Free.pdf"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2004: No Meeting</title><link href="http://nwcpp.org/december-2004.html" rel="alternate"></link><updated>2004-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-12-01:december-2004.html</id><summary type="html"></summary></entry><entry><title>November 10th, 2004 — STL/CLI — Stan Lippman</title><link href="http://nwcpp.org/november-2004.html" rel="alternate"></link><updated>2004-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-11-01:november-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Building 43, Adams Conference Room&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;STL&lt;/span&gt;/&lt;span class="caps"&gt;CLI&lt;/span&gt; — &lt;span class="caps"&gt;STL&lt;/span&gt; containers and generic algorithms for Microsoft .&lt;span class="caps"&gt;NET&lt;/span&gt;
Framework and &lt;span class="caps"&gt;ECMA&lt;/span&gt; Common Language&amp;nbsp;Infrastructure&lt;/p&gt;
&lt;p&gt;C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; brings C++ idioms to managed code development.
With templates and &lt;span class="caps"&gt;CLI&lt;/span&gt; Generics, &lt;span class="caps"&gt;STL&lt;/span&gt;/&lt;span class="caps"&gt;CLI&lt;/span&gt; brings the Standard Library containers,
iterator and algorithms to .&lt;span class="caps"&gt;NET&lt;/span&gt; development,
while leveraging the runtime facilities like garbage collection,
verifiability, and versionable binary&amp;nbsp;interfaces.&lt;/p&gt;
&lt;p&gt;This talk will discuss the rationale, design decisions and techniques of &lt;span class="caps"&gt;STL&lt;/span&gt;/&lt;span class="caps"&gt;CLI&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Stan Lippman is an Architect with the Visual C++ team at Microsoft.
He began working on C++ with its inventor Bjarne Stroustrup back in 1984
within Bell Laboratories.
In between, he worked in Feature Animation at Disney and DreamWorks,
was a Distinguished Consultant with &lt;span class="caps"&gt;JPL&lt;/span&gt;,
and was a Software Technical Director on Fantasia 2000 in the Firebird segment.
He is the author of &lt;em&gt;C++ Primer&lt;/em&gt; and &lt;em&gt;Inside the C++ Object Model&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional&amp;nbsp;Information&lt;/h2&gt;
&lt;p&gt;Please note that in order to accommodate the increased attendance,
this meeting will be held at the &lt;strong&gt;Microsoft Corporation&lt;/strong&gt;
rather than our usual meeting location.
Due to increased security, those attending the meeting
will be required to check in at the front desk.
Like other &lt;span class="caps"&gt;NWCPP&lt;/span&gt; meetings, this meeting is free
and you are welcome to attend without prior registration.
However, we do ask that you register if you know beforehand
that you will be attending this&amp;nbsp;meeting.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 13th, 2004 — The D Programming Language — Walter Bright</title><link href="http://nwcpp.org/october-2004.html" rel="alternate"></link><updated>2004-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-10-01:october-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.humongous.com"&gt;Humongous Entertainment&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;3855 Monte Villa Parkway&lt;/div&gt;
&lt;div class="line"&gt;Bothell, Washington 98021&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The D Programming Language is the result of many years of experience
with compilers and languages, especially C++.
C++ is a powerful, groundbreaking language.
D comes from looking at what works in C++, what doesn&amp;#8217;t work,
and refactoring the language to take advantage of hindsight
in how things can work better.
D adds in proven capabilities from other modern languages that are sorely missed in C++.
This talk is an overview of D—what it is, why it is that way,
and how it works out in&amp;nbsp;practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Walter Bright&amp;#8217;s first major program was the groundbreaking wargame Empire.
He then became interested in compilers and computer languages.
He&amp;#8217;s written compilers for &lt;span class="caps"&gt;ABEL&lt;/span&gt;, Pascal, C, C++, Java, Javascript, and now D.
His extensive experience writing C++ compilers
and well over a decade being on the front lines of doing C++ customer support
is an ideal background for improving on the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 8th, 2004 — Achieving Source-Level Software Portability Using GNU Autoconf, Automake, Libtool, and Make — Robert P. Goddard</title><link href="http://nwcpp.org/september-2004.html" rel="alternate"></link><updated>2004-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-09-01:september-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.humongous.com"&gt;Humongous Entertainment&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;3855 Monte Villa Parkway&lt;/div&gt;
&lt;div class="line"&gt;Bothell, Washington 98021&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;If you have ever downloaded &amp;quot;open-source&amp;quot; software as source code from &lt;span class="caps"&gt;GNU&lt;/span&gt; or elsewhere,
you have witnessed the following&amp;nbsp;magic:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./configure
make
make check
make install
&lt;/pre&gt;
&lt;p&gt;after which the software just works, even for very complex packages,
no matter which of a very large range of systems you happen to be&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;Yes, it even does Windows.
I will describe a powerful set of tools that
will help you to achieve this level of simplicity (for the user)
and portability for your applications.
The cost is surprisingly low in time and effort, and zero for the&amp;nbsp;tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bob Goddard has been an active member of &lt;span class="caps"&gt;NW&lt;/span&gt; C++ &lt;span class="caps"&gt;UG&lt;/span&gt; for many years.
You will recognize his face.
He has worked at the University of Washington Applied Physics Laboratory since 1980.
He is the primary author of the Sonar Simulation Toolset (&lt;span class="caps"&gt;SST&lt;/span&gt;) software,
a large C++ system for simulation of sound in the sea.
&lt;span class="caps"&gt;SST&lt;/span&gt; is being used at several Navy and university laboratories
to generate artificial underwater sound,
which is used to develop new sonar systems, train sonar operators,
and predict performance of new and existing sonar systems and tactics.
He has also worked on other projects related to underwater acoustics,
including simulation, analysis, and data acquisition applications.
His niche is in the gray overlap area between software engineering and &amp;quot;real&amp;quot;&amp;nbsp;science.&lt;/p&gt;
&lt;p&gt;For more details, go to
&lt;a class="reference external" href="http://staff.washington.edu/rpg3/"&gt;http://staff.washington.edu/rpg3/&lt;/a&gt;,
&lt;a class="reference external" href="http://www.apl.washington.edu/"&gt;http://www.apl.washington.edu/&lt;/a&gt;,
and &lt;a class="reference external" href="http://eis.apl.washington.edu/projects/projects.php"&gt;http://eis.apl.washington.edu/projects/projects.php&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2004/GNU_Autotools_040908.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 11th, 2004 — "Square Table" Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2004.html" rel="alternate"></link><updated>2004-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-08-01:august-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring money for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 14th, 2004 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2004.html" rel="alternate"></link><updated>2004-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-07-01:july-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring money for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>June 9th, 2004 — Roundtable Meeting: The Virtues of Linux — Open Discussion</title><link href="http://nwcpp.org/june-2004.html" rel="alternate"></link><updated>2004-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-06-01:june-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Desert Fire&lt;/div&gt;
&lt;div class="line"&gt;7211 166th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
The topic is just a suggestion,
and we may find that we prefer to socialize rather than discuss anything in particular.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt; members.
If you plan on eating, please bring money for food and&amp;nbsp;drinks.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 12th, 2004 — Improving Testability — Dave Catlett</title><link href="http://nwcpp.org/may-2004.html" rel="alternate"></link><updated>2004-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-05-01:may-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="improving-testability-decreasing-the-cost-of-developing-and-maintaining-software-while-increasing-quality"&gt;
&lt;h2&gt;Improving Testability: Decreasing the cost of developing and maintaining software while increasing&amp;nbsp;quality&lt;/h2&gt;
&lt;p&gt;Thorough testing can be expensive in terms of time and resources,
especially if the software component or the systems it interacts with
are difficult to test.
It is necessary though in order to deliver high quality software
that meets the user&amp;#8217;s needs.
By designing testability features into the component, not only is testing easier,
it helps enforce good design principles,
it makes diagnosing unexpected behavior go faster,
it can improve manageability of the component,
and it reduces the cost of supporting the software after it &amp;quot;ships.&amp;quot;
In short, it increases quality while reducing&amp;nbsp;cost.&lt;/p&gt;
&lt;p&gt;Determining testability can be achieved using the &lt;span class="caps"&gt;SOCK&lt;/span&gt; analysis method,
where S=Simplicity, O=Observability, C=Control, and K=Knowledge of expected results.
For example, using an observer design pattern class to increase observability
will not only make it easier for an automated test to determine pass or fail
at any given point in time,
it will provide a history of events
making diagnosis of a bug much easier both during the development cycle
and by the support team after the software is shipped.
We will go through this and other practical examples
of how to improve testability by improve in each area of &lt;span class="caps"&gt;SOCK&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Dave Catlett has been testing software
and developing people, tools and techniques for testing software for over 12 years.
In his current role as Test Architect for the Microsoft Windows Networking &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Devices group,
Dave has been researching and implementing methods to decrease the costs
while increasing the quality of software throughout the engineering lifecycle.
Dave holds a &lt;span class="caps"&gt;B.S.&lt;/span&gt; in Computer Science/Math from the University of Puget Sound
and more importantly is a husband to Erika and dad to Josh, Emilie and Sara.
He&amp;#8217;s also pursuing a career as world-famous groundskeeper
for the Eastlake Little League Dodgers of which his son is a starting pitcher.
Go&amp;nbsp;blue!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2004/ImprovingTestabilityNWCPP.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 14th, 2004 — Double-Checked Locking, Threads, Compiler Optimizations, and More — Scott Meyers</title><link href="http://nwcpp.org/april-2004.html" rel="alternate"></link><updated>2004-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-04-01:april-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The Double-Checked Locking Pattern is a common approach to efficient lazy initialization.
Unfortunately, it&amp;#8217;s not reliable in threaded systems,
it can fail for different reasons in uniprocessor and multiprocessor environments,
and there&amp;#8217;s no portable way to make it reliable.
Every C++ programmer needs to understand why this is the case,
because it affects the very core of software development:
code generation and program execution.
This presentation takes a deep look at code generation,
compiler and hardware optimization, sequence points,
&amp;quot;observable behavior,&amp;quot; the significance of &amp;quot;volatile,&amp;quot;
cache coherency problems, and memory barriers.
It concludes with suggestions for those who want the efficiency of lazy initialization,
but who value correct program behavior even&amp;nbsp;more.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Scott Meyers is one of the world&amp;#8217;s foremost experts on C++ software development.
He wrote the best-selling &lt;em&gt;Effective C++&lt;/em&gt; series
(&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-92488-9/"&gt;Effective C++&lt;/a&gt;,
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-63371-X/"&gt;More Effective C++&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-74962-9/"&gt;Effective &lt;span class="caps"&gt;STL&lt;/span&gt;&lt;/a&gt;);
wrote and designed the innovative
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-31015-5/"&gt;Effective C++ &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;;
is consulting editor for Addison Wesley&amp;#8217;s &lt;em&gt;Effective Software Development Series&lt;/em&gt;;
and is a member of the advisory board for
&lt;a class="reference external" href="http://www.sdmagazine.com/"&gt;Software Development&lt;/a&gt; magazine.
He also sits on technical advisory boards for several start-up companies.
A programmer since 1972, he holds an &lt;span class="caps"&gt;M.S.&lt;/span&gt; in Computer Science from Stanford University
and a Ph.D. from Brown&amp;nbsp;University.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2004/DCLP_notes.pdf"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 8th, 2004 — Code Complete 2: A Decade of Advances in Software Construction — Steve McConnell</title><link href="http://nwcpp.org/march-2004.html" rel="alternate"></link><updated>2004-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-03-01:march-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.overlakehospital.org/conferencecenter/fs.htm"&gt;Overlake Hospital Conference Center&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;1035 116th Ave &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington, 98004&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Please note that in order to offset some of the costs necessary to host
this meeting, there will be a &lt;strong&gt;$10 charge to non-&lt;span class="caps"&gt;NWCPP&lt;/span&gt; and non-&lt;span class="caps"&gt;WSA&lt;/span&gt; members&lt;/strong&gt;.
Membership in the &lt;span class="caps"&gt;NWCPP&lt;/span&gt; is &lt;strong&gt;free&lt;/strong&gt;, and is a great way to
ensure that you may attend this meeting for free.
To become a member, visit the &lt;a class="reference external" href="http://nwcpp.org/about.html"&gt;Membership&lt;/a&gt; page
and join our mailing list.
&lt;strong&gt;Only members on the &lt;span class="caps"&gt;NWCPP&lt;/span&gt; mailing list and &lt;span class="caps"&gt;WSA&lt;/span&gt; members may attend the meeting for&amp;nbsp;free!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For more than 10 years, Code Complete has been a computing-industry bestseller.
The past decade has seen the emergence of object-oriented programming,
the Internet, the &lt;span class="caps"&gt;CMM&lt;/span&gt;, offshore outsourcing, Java, Visual Basic,
and the Agile movement,
as well as staggering advances in computing power and numerous other developments.
How have 10 years of advances changed software construction?
Has the general state of programming improved?
Are any of the old techniques still relevant?
Has anything moved backward?
Award-winning author Steve McConnell explores the software issues
of yesterday and today
and arrives at a few lasting truths about software development.
This talk is based on Code Complete Second Edition, available in June&amp;nbsp;2004.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Steve McConnell is &lt;span class="caps"&gt;CEO&lt;/span&gt; and Chief Software Engineer at
&lt;a class="reference external" href="http://www.construx.com"&gt;Construx Software&lt;/a&gt;,
where he writes books and articles, teaches classes,
and oversees Construx’s software engineering&amp;nbsp;practices.&lt;/p&gt;
&lt;p&gt;Steve is the author of Code Complete (1993) and Rapid Development (1996),
both winners of Software Development magazine&amp;#8217;s Jolt award for
outstanding software development books of their respective years.
In 1998, he published Software Project Survival Guide.
His most recent book is Professional Software Development&amp;nbsp;(2003).&lt;/p&gt;
&lt;p&gt;Steve has worked in the desktop software industry since 1984
and has expertise in rapid development methodologies, project estimation,
software construction practices, performance tuning, system integration,
and third-party contract&amp;nbsp;management.&lt;/p&gt;
&lt;p&gt;Steve also served as Editor in Chief of &lt;span class="caps"&gt;IEEE&lt;/span&gt; Software from 1998-2002 and
is a member of &lt;span class="caps"&gt;IEEE&lt;/span&gt; Computer Society and &lt;span class="caps"&gt;ACM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Steve earned a master&amp;#8217;s degree in software engineering from Seattle University
and a bachelor&amp;#8217;s degree from Whitman College in Walla Walla,&amp;nbsp;Washington.&lt;/p&gt;
&lt;p&gt;Send email to &lt;a class="reference external" href="mailto:steve.mcconnell&amp;#64;construx.com"&gt;Steve McConnell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note that in order to accommodate the increased attendance, this
meeting will be held on &lt;strong&gt;Monday&lt;/strong&gt; at the &lt;strong&gt;Overlake Medical Conference
Center&lt;/strong&gt; rather than our usual Wednesday meeting at&amp;nbsp;Avaya.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2004/CodeComplete-Keynote.pdf"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 11th, 2004 — C++ Development for PocketPC, SmartPhone, and Windows CE — Nishan Jebanasam &amp; Rich Hanbidge</title><link href="http://nwcpp.org/february-2004.html" rel="alternate"></link><updated>2004-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-02-01:february-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Learn about the new native device development feature
in the next release of Visual Studio.
This talk will cover developing, debugging and deploying C++ applications
to Pocket &lt;span class="caps"&gt;PC&lt;/span&gt;, Smartphone and Windows &lt;span class="caps"&gt;CE&lt;/span&gt;.
It will also cover improvements made since eMbedded Visual C++
and the work being done in the native frameworks such as &lt;span class="caps"&gt;MFC&lt;/span&gt; and &lt;span class="caps"&gt;ATL&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bios"&gt;
&lt;h2&gt;Bios&lt;/h2&gt;
&lt;div class="section" id="nishan-jebanasam"&gt;
&lt;h3&gt;Nishan&amp;nbsp;Jebanasam&lt;/h3&gt;
&lt;p&gt;I graduated from the University of New South Wales in Sydney, Australia
with a double degree in Computer Engineering and Goofing Off,
and gave up the miserable weather and horrid beaches
for the fairer climate of Seattle.
I’ve been in the Smart Devices team for over two-and-a-half years now,
first as a Release Program Manager,
and subsequently as the &lt;span class="caps"&gt;PM&lt;/span&gt; for Native C++ for Device development features.
In my spare time I like to scuba dive, snowboard, play Halo
and flirt with the Seattle Police in my Lancer Evo.
I’m desperately hoping &lt;span class="caps"&gt;MS&lt;/span&gt; stock will one day allow me to afford the 911 Turbo that I long&amp;nbsp;for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rich-hanbidge"&gt;
&lt;h3&gt;Rich&amp;nbsp;Hanbidge&lt;/h3&gt;
&lt;p&gt;I graduated from University of Michigan in 98 with a &lt;span class="caps"&gt;BSE&lt;/span&gt; in Computer Engineering.
I grew up just outside of Detroit, and saw my first mountain
during an interview with &lt;span class="caps"&gt;HP&lt;/span&gt; in Fort Collins, &lt;span class="caps"&gt;CO&lt;/span&gt;.
I promptly decided to flee the flatness of the Midwest.
My first job was working on avionics software with Honeywell,
until I realized they were actually putting my code on airplanes…
Since I need to fly back to Detroit to see my family, this was a problem for me.
Now I am a developer in Visual Studio for Devices to support my snowboarding problem.
I’ve been here about 3.5 years,
and holding a close second for “grumpy old man” of this group.
When I’m not complaining to the newbies
about how fun this group was before they got here,
I’m trying to help write a kick-ass native debugger for&amp;nbsp;devices.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2004/C_UserGroup-_Developing_for_Devices_Using_Native_C___with_Visual_Studio__With_Notes_.ppt"&gt;Click here&lt;/a&gt;
to download the slides and source code from Nishan Jebanasam&amp;#8217;s&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 14th, 2004 — for_each — Eric Niebler</title><link href="http://nwcpp.org/january-2004.html" rel="alternate"></link><updated>2004-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2004-01-01:january-2004.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Writing loops over sequences is harder in C++ than in other languages,
many of which provide a dedicated &lt;tt class="docutils literal"&gt;for_each&lt;/tt&gt; looping construct.
In this talk, Eric describes how to implement and use
a generic, type-safe and extensible foreach construct in C++
with the help of the preprocessor and some sneaky template tricks.
The techniques, first presented in the Nov. C/C++ Users&amp;#8217; Journal,
are extended to work with &lt;span class="caps"&gt;STL&lt;/span&gt; containers.
Time permitting, Eric will describe why &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;std::for_each&lt;/span&gt;&lt;/tt&gt; doesn&amp;#8217;t cut it,
and why we need a language&amp;nbsp;extension.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Eric is an independent software consultant currently working with
Dave Abrahams and Boost Consulting.
He is a former employee of Microsoft Research and Visual C++,
and his writings about C++ have been published
in the C/C++ User&amp;#8217;s Journal and &lt;span class="caps"&gt;MSDN&lt;/span&gt; Magazine.
When he&amp;#8217;s not writing C++ for money, Eric has been known to write C++ for&amp;nbsp;fun.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2004/foreach.zip"&gt;Click here&lt;/a&gt;
to download the slides and source code from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 10th, 2003 — The Future of C++ on .NET: A Tour of C++/CLI — Herb Sutter</title><link href="http://nwcpp.org/december-2003.html" rel="alternate"></link><updated>2003-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-12-01:december-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Microsoft Corporation&lt;/div&gt;
&lt;div class="line"&gt;Building 27, Conference Room 1810 (Olympic)&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;In October 2003, a new &lt;span class="caps"&gt;ECMA&lt;/span&gt; standards committee was formed to create an
international standard for &amp;quot;C++/&lt;span class="caps"&gt;CLI&lt;/span&gt;,&amp;quot; a set of C++ extensions for .&lt;span class="caps"&gt;NET&lt;/span&gt;
programming designed by Microsoft in collaboration with C++ industry
leaders as a successor to &amp;quot;Managed C++.&amp;quot;
Formally, C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; is a binding between &lt;span class="caps"&gt;ISO&lt;/span&gt; C++ and &lt;span class="caps"&gt;ISO&lt;/span&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt;
(Common Language Infrastructure, the standardized subset of
the .&lt;span class="caps"&gt;NET&lt;/span&gt; runtime environment and frameworks class library);
see the announcement at
&lt;a class="reference external" href="http://www.ecma-international.org/news/ecma-TG5-PR.htm"&gt;www.ecma-international.org/news/ecma-&lt;span class="caps"&gt;TG5&lt;/span&gt;-&lt;span class="caps"&gt;PR&lt;/span&gt;.htm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this talk, the lead architect of C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; talks about the language
design and major features, with a look under the hood at how compilers
are implementing the new semantics. C++/&lt;span class="caps"&gt;CLI&lt;/span&gt; provides first-class and
cleanly integrated support in the C++ language for all .&lt;span class="caps"&gt;NET&lt;/span&gt; features
(e.g., properties and events, garbage collection and generics) uniformly
for all types including also for native types. It also provides
first-class support on the .&lt;span class="caps"&gt;NET&lt;/span&gt; platform for all standard C++ features
(e.g., deterministic destruction and templates) uniformly for all types,
including also for .&lt;span class="caps"&gt;NET&lt;/span&gt; types. These facilities are expressed through a
set of pure conforming extensions, underpinned by a unified type system
and unified pointer/storage&amp;nbsp;system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Herb Sutter&lt;/strong&gt;
is a leading authority on C++ software development.
Author of more than
180 &lt;a class="reference external" href="http://www.gotw.ca/publications/index.htm"&gt;technical articles and papers&lt;/a&gt;
and of the widely acclaimed books
&lt;a class="reference external" href="http://www.gotw.ca/publications/xc++.htm"&gt;Exceptional C++&lt;/a&gt;
and &lt;a class="reference external" href="http://www.gotw.ca/publications/mxc++.htm"&gt;More Exceptional C++&lt;/a&gt;,
he regularly gives invited talks at conferences around the world
and is available for
private &lt;a class="reference external" href="http://www.gotw.ca/consulting.htm"&gt;training and mentoring&lt;/a&gt;
for new and current corporate&amp;nbsp;clients.&lt;/p&gt;
&lt;p&gt;Please note that in order to accommodate the increased attendance, this
meeting will be held at the &lt;strong&gt;Microsoft Corporation&lt;/strong&gt; rather than our
usual meeting at&amp;nbsp;Avaya.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2003/HerbSutterCLI.pdf"&gt;Click here&lt;/a&gt;
to download the source code and slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>November 10th, 2003 — The Future of C++: A Panel Discussion with the Experts — Andrei Alexandrescu, Scott Meyers, &amp; Herb Sutter</title><link href="http://nwcpp.org/november-2003.html" rel="alternate"></link><updated>2003-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-11-01:november-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.overlakehospital.org/conferencecenter/fs.htm"&gt;Overlake Hospital Conference Center&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;1035 116th Ave &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, Washington, 98004&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Please note that in order to offset some of the costs necessary to host
this meeting, there will be a &lt;strong&gt;$10 charge to non-&lt;span class="caps"&gt;NWCPP&lt;/span&gt; and non-&lt;span class="caps"&gt;WSA&lt;/span&gt; members&lt;/strong&gt;.
Membership in the &lt;span class="caps"&gt;NWCPP&lt;/span&gt; is &lt;strong&gt;free&lt;/strong&gt;, and is a great way to
ensure that you may attend this meeting for free.
To become a member, visit the &lt;a class="reference external" href="http://nwcpp.org/about.html"&gt;Membership&lt;/a&gt; page
and join our mailing list.
&lt;strong&gt;Only members on the &lt;span class="caps"&gt;NWCPP&lt;/span&gt; mailing list and &lt;span class="caps"&gt;WSA&lt;/span&gt; members may attend the meeting for&amp;nbsp;free!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This meeting is a great opportunity to pick the minds of some of the
most well-known experts in the C++ community!
The meeting will be a moderated panel discussion and the three experts
will be open to questions from the audience regarding the current state of
the C++ language and the direction in which it is forging ahead.
This is a unique opportunity, and we hope that you can be a part of&amp;nbsp;it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bios"&gt;
&lt;h2&gt;Bios&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Andrei Alexandrescu&lt;/strong&gt;
is a world-class expert in software development using C++.
In the C++ community, he is best known for his book,
&lt;a class="reference external" href="http://www.moderncppdesign.com/book/main.html"&gt;Modern C++ Design&lt;/a&gt;.
Also, Andrei is a columnist for &lt;a class="reference external" href="http://www.cuj.com/"&gt;C/C++ Users Journal&lt;/a&gt;,
a former columnist for the C++ Report, and a sought-after speaker at
conferences&amp;nbsp;worldwide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scott Meyers&lt;/strong&gt;
is one of the world&amp;#8217;s foremost experts on C++ software development.
He wrote the best-selling &lt;em&gt;Effective C++&lt;/em&gt; series
(&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-92488-9/"&gt;Effective C++&lt;/a&gt;,
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-63371-X/"&gt;More Effective C++&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-74962-9/"&gt;Effective &lt;span class="caps"&gt;STL&lt;/span&gt;&lt;/a&gt;);
wrote and designed the innovative
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-31015-5/"&gt;Effective C++ &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;;
is consulting editor for Addison Wesley&amp;#8217;s &lt;em&gt;Effective Software Development Series&lt;/em&gt;;
and is a member of the advisory board for
&lt;a class="reference external" href="http://www.sdmagazine.com/"&gt;Software Development&lt;/a&gt; magazine.
He also sits on technical advisory boards for several start-up companies.
A programmer since 1972, he holds an &lt;span class="caps"&gt;M.S.&lt;/span&gt; in Computer Science from Stanford University
and a Ph.D. from Brown&amp;nbsp;University.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Herb Sutter&lt;/strong&gt;
is a leading authority on C++ software development.
Author of more than
180 &lt;a class="reference external" href="http://www.gotw.ca/publications/index.htm"&gt;technical articles and papers&lt;/a&gt;
and of the widely acclaimed books
&lt;a class="reference external" href="http://www.gotw.ca/publications/xc++.htm"&gt;Exceptional C++&lt;/a&gt;
and &lt;a class="reference external" href="http://www.gotw.ca/publications/mxc++.htm"&gt;More Exceptional C++&lt;/a&gt;,
he regularly gives invited talks at conferences around the world
and is available for
private &lt;a class="reference external" href="http://www.gotw.ca/consulting.htm"&gt;training and mentoring&lt;/a&gt;
for new and current corporate&amp;nbsp;clients.&lt;/p&gt;
&lt;p&gt;Please note that in order to accommodate the increased attendance, this
meeting will be held on &lt;strong&gt;Monday&lt;/strong&gt; at the &lt;strong&gt;Overlake Medical Conference
Center&lt;/strong&gt; rather than our usual Wednesday meeting at&amp;nbsp;Avaya.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 8th, 2003 — Object-Oriented Multithreading in C++ — Bartosz Milewski</title><link href="http://nwcpp.org/october-2003.html" rel="alternate"></link><updated>2003-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-10-01:october-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Traditional procedural approach to thread programming is to create a
thread and pass it a function to execute. But a function operates on
data. The data is most likely shared with other threads. In the
object-oriented world data comes first. You create an ActiveObject whose
state develops asynchronously. There is a captive thread inside an
Active Object, but it&amp;#8217;s only an implementation&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;I will describe a C++ implementation of Active Object using Windows &lt;span class="caps"&gt;API&lt;/span&gt;
and I will discuss multiple uses of ActiveObject in our own commercial
product, including various synchronization&amp;nbsp;techniques.&lt;/p&gt;
&lt;p&gt;A similar concept in Java is called the Runnable&amp;nbsp;interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski is the author of C++ In Action, Industrial-Strength
Programming Techniques (Addison-Wesley, 2001). He is the founder of
Reliable Software (&lt;a class="reference external" href="http://www.relisoft.com"&gt;www.relisoft.com&lt;/a&gt;), a
Seattle-based company that makes a peer-to-peer version control system,
Code Co-op. He was one of the architects of the Microsoft Index&amp;nbsp;Server.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2003/Bartosz.zip"&gt;Click here&lt;/a&gt;
to download the source code and slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 10th, 2003 — Thread Safe Object—Never Think About Thread Safety Again — David Brownell</title><link href="http://nwcpp.org/september-2003.html" rel="alternate"></link><updated>2003-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-09-01:september-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Ask any developer, and they will tell you that multithreaded programming is hard.
Very hard.
One staple of this difficult style of programming
is the effective and thorough use of mutexes and critical sections.
Unfortunately this technique can be tedious and best and produce error
and race conditions at worst.
This presentation will introduce you to ThreadSafeObject,
a generic object that guarantees you will never have
to surround a variable or code with a mutex or critical section ever again.
We will cover generic programming, dive into the magic that
makes auto_ptr work, and discuss meta-programming techniques - the code
that makes an object change behavior at compile time based on type.
Use ThreadSafeObject, and never think about thread safety&amp;nbsp;again!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;David Brownell has been using C++ in a professional environment for the
past 5 years. Graduating with a &lt;span class="caps"&gt;BSCS&lt;/span&gt; from Seattle University in 1998,
David has worked on faxing applications, automated scripting utilities,
secure communications technologies, generic programming techniques, and
peer-to-peer applications. David currently works as a Software Engineer
at Orrtax Software in Bellevue, Washington and serves as president for
the Northwest C++ Users&amp;nbsp;Group.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2003/ThreadSafeObject.zip"&gt;Click here&lt;/a&gt;
to download the source code and slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 2003: No Meeting</title><link href="http://nwcpp.org/august-2003.html" rel="alternate"></link><updated>2003-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-08-01:august-2003.html</id><summary type="html"></summary></entry><entry><title>July 2003: No Meeting</title><link href="http://nwcpp.org/july-2003.html" rel="alternate"></link><updated>2003-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-07-01:july-2003.html</id><summary type="html"></summary></entry><entry><title>June 2003: No Meeting</title><link href="http://nwcpp.org/june-2003.html" rel="alternate"></link><updated>2003-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-06-01:june-2003.html</id><summary type="html"></summary></entry><entry><title>May 14th, 2003 — The Bizarro World of hetero_stack… — Eric Niebler</title><link href="http://nwcpp.org/may-2003.html" rel="alternate"></link><updated>2003-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-05-01:may-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;The Bizarro World of hetero_stack, or How I Learned to Stop Worrying
and Love &lt;span class="caps"&gt;RTTI&lt;/span&gt;, or Alignment, Exceptions and Type-Safety, Oh My! or
Subverting the C++ Type System for Fun and&amp;nbsp;Profit.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;hetero_stack is a dynamic replacement for the program stack. Push
anything! Pop anything! I&amp;#8217;ll talk about how to make it work and how to
make it type-safe and exception-safe. (I might even say a few words
about why you might want to do such a thing.) We&amp;#8217;ll cover alignment,
runtime time info and the strong exception guarantee, time permitting.
This talk assumes knowledge of templates and exceptions, but nothing too&amp;nbsp;esoteric.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Eric Niebler studied Computer Science at the University of Virginia. He
spent several years in the Windows 2000 group at Microsoft before moving
to a development position at Microsoft Research in the Natural Language
Processing group. He is now a library developer in the Visual C++ group.
His interests include data structures and algorithms; compiler,
language, and library design; data serialization and persistence; and
pattern&amp;nbsp;matching.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2003/Slides200305.ppt"&gt;Click here&lt;/a&gt;
to download the slides from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 9th, 2003 — New Features in Visual C++ .NET 2003 — Ed Dudenhoefer</title><link href="http://nwcpp.org/april-2003.html" rel="alternate"></link><updated>2003-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-04-01:april-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;An overview of the newest version of Visual C++, codenamed Everett.
New features including the &lt;span class="caps"&gt;IDE&lt;/span&gt;, project system, forms designer, compiler,
debugger, conformance, security and library improvements are explained
or demonstrated. Tips and possible breaking changes will also be&amp;nbsp;noted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Ed Dudenhoefer is a Program Manager on the Visual C++ team at Microsoft.
He is responsible for internal and external C++ developer community support
and product&amp;nbsp;adoption.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 12th, 2003 — Resource Management in C++ — Bartosz Milewski</title><link href="http://nwcpp.org/march-2003.html" rel="alternate"></link><updated>2003-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-03-01:march-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Everybody knows the adage &amp;quot;Resource acquisition is initialization.&amp;quot;
Not many people know that this simple principle gave rise to the whole
methodology of Resource Management (&lt;span class="caps"&gt;RM&lt;/span&gt;).
Bartosz will try to convince us that &lt;span class="caps"&gt;RM&lt;/span&gt; is better than garbage collection.
He will describe auto_vector
— a simpler alternative to a vector of reference-counted smart pointers
(which will most likely become part of the new C++ Standard).
He will also talk about his personal favorite: using &lt;span class="caps"&gt;RM&lt;/span&gt; in Windows (non-&lt;span class="caps"&gt;MFC&lt;/span&gt;)&amp;nbsp;programming.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz is the author of the book,
&lt;a class="reference external" href="http://www.relisoft.com/book/"&gt;C++ In Action&lt;/a&gt;,
published by Addison-Wesley in 2001.
He is also the &lt;span class="caps"&gt;CEO&lt;/span&gt; of Reliable Software &lt;span class="caps"&gt;LLC&lt;/span&gt;
(see his company website &lt;a class="reference external" href="http://www.relisoft.com"&gt;www.relisoft.com&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 12th, 2003 — Mojo — Andrei Alexandrescu</title><link href="http://nwcpp.org/february-2003.html" rel="alternate"></link><updated>2003-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-02-01:february-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Attend this talk to learn about Mojo, the new framework, library, and
coding guideline that enables you to pass and return values without
fearing that copying temporaries is going to ruin runtime performance or
your code review. Mojo guarantees that, if you follow a number of simple
rules when designing your classes, you will totally eliminate
unnecessary&amp;nbsp;copying.&lt;/p&gt;
&lt;p&gt;Learn about Mojo from its own creator for 90 fun and instructive
minutes. Mojo uses a cornucopia of interesting tricks and techniques
that are likely to make your day whether you use C++ (you&amp;#8217;ll be happy
you can apply them) or other languages (you&amp;#8217;ll be happy you can&amp;#8217;t apply&amp;nbsp;them).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is working on a graduate degree at the University of
Washington. He is the author of the acclaimed book Modern C++ Design.
Andrei is also a columnist for C/C++ Users Journal, a C++ former
columnist for the C++ Report, a speaker at numerous conferences, and one
of the featured instructors of The C++ Seminar
(&lt;a class="reference external" href="http://www.gotw.ca/cpp_seminar"&gt;www.gotw.ca/cpp_seminar&lt;/a&gt;).
His website is &lt;a class="reference external" href="http://www.moderncppdesign.com"&gt;www.moderncppdesign.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 8th, 2003 — Unit Testing — Asim Jalis</title><link href="http://nwcpp.org/january-2003.html" rel="alternate"></link><updated>2003-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2003-01-01:january-2003.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The talk will focus on C/C++ unit testing and test-driven development
using the CuTest library. CuTest is simple, portable, and follows the
JUnit look and feel in its output and &lt;span class="caps"&gt;API&lt;/span&gt;. The topics covered will&amp;nbsp;include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to Test Driven Development (&lt;span class="caps"&gt;TDD&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Demo of using &lt;span class="caps"&gt;TDD&lt;/span&gt; to write C/C++&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;Comparison of CuTest with other C/C++ unit testing&amp;nbsp;frameworks&lt;/li&gt;
&lt;li&gt;Some testing ideas and&amp;nbsp;techniques&lt;/li&gt;
&lt;li&gt;How to test exhaustively using&amp;nbsp;tables&lt;/li&gt;
&lt;li&gt;How to leverage traditional assert()&amp;#8217;s with unit&amp;nbsp;tests&lt;/li&gt;
&lt;li&gt;How to unit test system calls and &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;code&lt;/li&gt;
&lt;li&gt;Open discussion on testing ideas and&amp;nbsp;problems&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Asim Jalis is a software engineer at Hewlett-Packard Company. He is
currently working on web services management software, which is
primarily in C# and also uses C/C++, Java and Perl.&amp;nbsp;&amp;nbsp; He is deeply
interested in test driven development and ways of making this easier and
more effective. He is the author of CuTest, a unit testing framework for C,
and Test::Extreme, a unit testing framework for&amp;nbsp;Perl.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2002: No Meeting</title><link href="http://nwcpp.org/december-2002.html" rel="alternate"></link><updated>2002-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-12-01:december-2002.html</id><summary type="html"></summary></entry><entry><title>November 13th, 2002 — C++ Techniques for Tomorrow That Can be Implemented Today (aka Boosting your Code) — David Brownell</title><link href="http://nwcpp.org/november-2002.html" rel="alternate"></link><updated>2002-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-11-01:november-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This presentation will illustrate techniques to ensure code correctness
at compile time, extend the &lt;span class="caps"&gt;STL&lt;/span&gt;, and enhance C++ using the freely
available and portable boost libraries,
&lt;a class="reference external" href="http://www.boost.org"&gt;www.boost.org&lt;/a&gt;. Beginning with brief overviews
of the boost organization and the boost libraries, we will then explore
ten specific boost libraries, covering the why’s, what’s, and how’s
behind the concepts that enable all three of the techniques listed&amp;nbsp;above.&lt;/p&gt;
&lt;p&gt;This presentation assumes familiarity with C++&amp;nbsp;templates.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;David Brownell has been using C++ in a professional environment for the
past 5 years. Graduating with a &lt;span class="caps"&gt;BSCS&lt;/span&gt; from Seattle University in 1998,
David has worked on faxing applications, automated scripting utilities,
secure communications technologies, generic programming techniques, and
peer-to-peer applications. David currently works as a Software Engineer
at Aegis Design in Seattle,&amp;nbsp;Washington.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2002/BoostPresentation.zip"&gt;Click here&lt;/a&gt;
to download the slides and source code from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 9th, 2002 — C++ Features to Beware of Today, and to Anticipate in C++ 0x — Herb Sutter</title><link href="http://nwcpp.org/october-2002.html" rel="alternate"></link><updated>2002-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-10-01:october-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;From exception specifications to export, from typedef templates to
typeof to delegating constructors, this talk analyzes current C++
features that you should use with care if at all, and important new
C++0x language features coming soon to a compiler near you. It shows why
the features are useful, where they have areas or effects that can be
dangerous or result in unintended effects, what kinds of coding idioms
and techniques they make possible, when you can expect them to be stable
in shipping compilers, who the people and companies behind them are, and
how you can use them safely and&amp;nbsp;effectively.&lt;/p&gt;
&lt;p&gt;Talk first given at &lt;a class="reference external" href="http://www.thecppseminar.com"&gt;The C++&amp;nbsp;Seminar&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Herb Sutter is conveyor and secretary, respectively, of the &lt;a class="reference external" href="http://std.dkuug.dk/jtc1/sc22/wg21/"&gt;&lt;span class="caps"&gt;ISO&lt;/span&gt; and
&lt;span class="caps"&gt;ANSI&lt;/span&gt; C++ standards committees&lt;/a&gt;,
contributing editor and columnist for &lt;a class="reference external" href="http://www.cuj.com"&gt;C/C++ Users Journal
(&lt;span class="caps"&gt;CUJ&lt;/span&gt;)&lt;/a&gt;, C++ community liaison for Microsoft, and
former editor-in-chief of C++ Report. He is also the author of more than
150 &lt;a class="reference external" href="http://www.gotw.ca/publications/index.htm"&gt;technical articles&lt;/a&gt;
and of the widely acclaimed books Exceptional C++, More Exceptional C++,
and the forthcoming titles C++ Coding Standards (with Andrei
Alexandrescu) and Exceptional C++&amp;nbsp;Style.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 18th, 2002 — Understanding templates as a form of weak typing — Bruce Eckel</title><link href="http://nwcpp.org/september-2002.html" rel="alternate"></link><updated>2002-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-09-01:september-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;As I learned the Python programming language (see
&lt;a class="reference external" href="http://www.python.org"&gt;www.Python.org&lt;/a&gt;), I began to understand the
concept of weak/latent typing (which the Smalltalk programmers are so
fond of). At first, this seems like a very heretical and dangerous
approach, but with time I not only began to see how powerful it is, but
also to understand C++ templates in terms of weak typing. I found this
gave me a much deeper understanding of the value and use of templates.
In this talk, I will introduce the Python language and the concept of
weak typing, and I will show C++ templates in the same light. You should
come away with a deeper grasp of templates and where they can be put to&amp;nbsp;use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bruce Eckel (&lt;a class="reference external" href="http://www.bruceeckel.com"&gt;www.BruceEckel.com&lt;/a&gt;) is the
author of Thinking in Java (Prentice-Hall, 1998, 2nd Edition, 2000), the
Hands-On Java Seminar &lt;span class="caps"&gt;CD&lt;/span&gt; &lt;span class="caps"&gt;ROM&lt;/span&gt; (available on the Web site), Thinking in
C++ (&lt;span class="caps"&gt;PH&lt;/span&gt; 1995; 2nd edition 2000), C++ Inside &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Out (Osborne/McGraw-Hill
1993), among others. He&amp;#8217;s given hundreds of presentations throughout the
world, published over 150 articles in numerous magazines, was a founding
member of the &lt;span class="caps"&gt;ANSI&lt;/span&gt;/&lt;span class="caps"&gt;ISO&lt;/span&gt; C++ committee and speaks regularly at
conferences. He provides public and private seminars &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; design consulting
in C++ and&amp;nbsp;Java.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 2002: No Meeting</title><link href="http://nwcpp.org/august-2002.html" rel="alternate"></link><updated>2002-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-08-01:august-2002.html</id><summary type="html"></summary></entry><entry><title>July 2002: No Meeting</title><link href="http://nwcpp.org/july-2002.html" rel="alternate"></link><updated>2002-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-07-01:july-2002.html</id><summary type="html"></summary></entry><entry><title>June 2002: No Meeting</title><link href="http://nwcpp.org/june-2002.html" rel="alternate"></link><updated>2002-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-06-01:june-2002.html</id><summary type="html"></summary></entry><entry><title>May 8th, 2002 — Embedded C++ : An Overview — Robert Blumberg</title><link href="http://nwcpp.org/may-2002.html" rel="alternate"></link><updated>2002-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-05-01:may-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This talk sets out many of the parameters that are recurrent when
programming small- to moderately-sized embedded systems in C++. It then
delves into C++ techniques to work within the resource-limited,
cost-sensitive, required-robustness confines of embedded systems. These
techniques are also useful when building &lt;span class="caps"&gt;PC&lt;/span&gt;&amp;nbsp;applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Robert Blumberg has over 35 years of programming experience, having
started by programming on &lt;span class="caps"&gt;IBM&lt;/span&gt; 7090 mainframes. As an executive, he has
been the director of Engineering at Bitstream and a &lt;span class="caps"&gt;VP&lt;/span&gt; of a speech
recognition company among other posts. However, he really enjoys
throwing C++ code, which he has been doing as a freelance programmer for
the last fifteen years or so, mostly for embedded systems and drivers.
Among other projects, he designed and coded the kernel, drivers and
coin-movement software for Coinstar’s big green coin-counting machines
often found in super&amp;nbsp;markets.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 10th, 2002 — Honey, I Shrunk the Threads: Compile-time checked multithreaded transactions in C++ — Andrei Alexandrescu</title><link href="http://nwcpp.org/april-2002.html" rel="alternate"></link><updated>2002-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-04-01:april-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This talk presents a couple of new, safe idioms that bring order in your
C++ multithreaded programs. We will cover three idioms for single-object
transactions and two idioms for multi-object transactions, with
examples. Warning: This talk is rated R for (C++) language abuse,
violence (of debate), and subliminal&amp;nbsp;content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei is a world-class expert in software development using C++. In the
C++ community, he is best known for his book, Modern C++ Design (Addison
Wesley, 2001). Also, Andrei is a former columnist for the C++ Report, a
columnist for C/C++ Users Journal, and a sought-after speaker at
conferences&amp;nbsp;worldwide.&lt;/p&gt;
&lt;p&gt;After working in large-scale projects ranging from financial software on
Wall Street to networking software to user interfaces, Andrei is
pursuing a Ph.D. in Computer Science at University of&amp;nbsp;Washington.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 13th, 2002 — Schism++: How Microsoft Proposes to Bridge the Gap Between ANSI C++ and the ‘Managed C++’ of .NET — Matthew Griscom</title><link href="http://nwcpp.org/march-2002.html" rel="alternate"></link><updated>2002-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-03-01:march-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Microsoft Visual Studio 7 .&lt;span class="caps"&gt;NET&lt;/span&gt; has shipped with improved support for
&lt;span class="caps"&gt;ANSI&lt;/span&gt; C++. The whole .&lt;span class="caps"&gt;NET&lt;/span&gt; aspect of this tool, discussed extensively in
this and other forums, is radically new and at first blush is
incompatible with &lt;span class="caps"&gt;ANSI&lt;/span&gt; C++, native code &lt;span class="caps"&gt;COM&lt;/span&gt; objects, etc. This talk will
address some of the aspects of how Microsoft proposes to bridge the gap
between existing source code, &lt;span class="caps"&gt;COM&lt;/span&gt; objects, etc. and executables using
the new suite of .&lt;span class="caps"&gt;NET&lt;/span&gt; technologies, in particular using the ‘Managed
C++’&amp;nbsp;syntax.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Matthew Griscom has coded medical communications protocols, database
integrity tools, a multi-user database engine, &lt;span class="caps"&gt;XSL&lt;/span&gt;-driven web pages, you
name it, for both Unix and Windows. Now, if only one of the cosmonauts
on the Space Station would push the button to use the connectivity
software he designed and wrote, that would be sincerely cool… Matt’s
been dot-bombed and is looking for C++ and .&lt;span class="caps"&gt;NET&lt;/span&gt; work in greater&amp;nbsp;Seattle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2002/Meeting_2002-03.zip"&gt;Click here&lt;/a&gt;
to download the slides and source code from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 13th, 2002 — Visual C++ .NET — Christian Harlass</title><link href="http://nwcpp.org/february-2002.html" rel="alternate"></link><updated>2002-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-02-01:february-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Microsoft Visual Studio .&lt;span class="caps"&gt;NET&lt;/span&gt; will ship in the coming weeks (at least
they say so) and everybody is talking about C#, &lt;span class="caps"&gt;VB&lt;/span&gt;, &lt;span class="caps"&gt;ASP&lt;/span&gt;, and &lt;span class="caps"&gt;ADO&lt;/span&gt;. What
about C++? How does it fit with new technologies? We will explore a
closer look at the new features of the compiler, the C Run-Time, and
three other libraries, namely &lt;span class="caps"&gt;STL&lt;/span&gt;, &lt;span class="caps"&gt;MFC&lt;/span&gt; and &lt;span class="caps"&gt;ATL&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Christian has come a long way from &lt;span class="caps"&gt;DOS&lt;/span&gt; to Unix and now to &lt;span class="caps"&gt;MS&lt;/span&gt; Windows (as
well as from Germany to Seattle!). Currently he works for Saxonia
Systems, a software consulting company based out of Dresden, Germany.
Besides his duties heading up Saxonia&amp;#8217;s &lt;span class="caps"&gt;U.S.&lt;/span&gt; consulting division in C++
programming, he is constantly keeping an eye on the market for new and
useful programming&amp;nbsp;tools.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/talks/2002/VC7Demo.zip"&gt;Click here&lt;/a&gt; to download the source code from the&amp;nbsp;presentation&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 9th, 2002 — Inter-Process Communications Using Shared Memory — Bartosz Milewski</title><link href="http://nwcpp.org/january-2002.html" rel="alternate"></link><updated>2002-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2002-01-01:january-2002.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;You are stranded on a desert island. All you have is a piece of shared
memory and a waitable timer. You are supposed to implement robust
inter-process communications in C++. Bartosz will explain the concept of
shared memory in Win32 and its use in establishing a protocol for data
exchange between processes. It&amp;#8217;s better than &lt;span class="caps"&gt;DDE&lt;/span&gt; and simpler than &lt;span class="caps"&gt;COM&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz is the author of C++ In Action, Industrial Strength Programming
Techniques, published by Addison-Wesley in 2001. During his years at
Microsoft he worked on several projects involving various aspects of
operating systems. He ported the Mach &lt;span class="caps"&gt;OS&lt;/span&gt; virtual memory system to the
x86 platform, took part in the development of the &lt;span class="caps"&gt;HPFS&lt;/span&gt; and &lt;span class="caps"&gt;OFS&lt;/span&gt; file
systems, was the architect and development lead of the Windows 2000
content index. He is now the president of Reliable Software, a
distributed software&amp;nbsp;company.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 12th, 2001 — A C++ Programmer’s Introduction to C# — Mike Moskowitz</title><link href="http://nwcpp.org/december-2001.html" rel="alternate"></link><updated>2001-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-12-01:december-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>November 14th, 2001 — JNI: How to use Java and C++ together — Christian Harlass</title><link href="http://nwcpp.org/november-2001.html" rel="alternate"></link><updated>2001-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-11-01:november-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Christian Harlass works with Saxonia Systems, an international
consulting company based in Germany. He works as a software developer
and project manager in a Unix, Mac and Windows environment. The idea for
this presentation comes from his project experiences with creating a
portable application with a Java &lt;span class="caps"&gt;GUI&lt;/span&gt; and a C++&amp;nbsp;core.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 8th, 2001 — Inside the .NET Framework — Paul Johns, aka MSDN’s "Dr. GUI"</title><link href="http://nwcpp.org/october-2001.html" rel="alternate"></link><updated>2001-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-10-01:october-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Overlake Hospital Educational Conference Center&lt;/div&gt;
&lt;div class="line"&gt;1035 116th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Room A&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;We&amp;#8217;re very fortunate to have &lt;span class="caps"&gt;MSDN&lt;/span&gt;&amp;#8217;s Dr. &lt;span class="caps"&gt;GUI&lt;/span&gt;, the always entertaining,
often irreverent, generally accurate source of knowledge of all things
.&lt;span class="caps"&gt;NET&lt;/span&gt;, come to speak to us in October. If you haven&amp;#8217;t started working
with .&lt;span class="caps"&gt;NET&lt;/span&gt;, this will be a great introduction to the .&lt;span class="caps"&gt;NET&lt;/span&gt; framework,
techniques and tools. If you have been working with .&lt;span class="caps"&gt;NET&lt;/span&gt;, you can ask
your questions (and perhaps get answers to them) without having to wait
for Dr. &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s next&amp;nbsp;column.&lt;/p&gt;
&lt;p&gt;Paul has written Dr. &lt;span class="caps"&gt;GUI&lt;/span&gt; for over five years now. In addition to the
bi-monthly question and answer column in the &lt;span class="caps"&gt;MSDN&lt;/span&gt; Developer News
newspaper, Dr. &lt;span class="caps"&gt;GUI&lt;/span&gt; has a weekly online question and answer column and a
more-or-less monthly .&lt;span class="caps"&gt;NET&lt;/span&gt; column called Dr. &lt;span class="caps"&gt;GUI&lt;/span&gt;.&lt;span class="caps"&gt;NET&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For a preview of this meeting&amp;#8217;s content, see the online&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;This is a joint meeting of the Northwest C++ User&amp;#8217;s Group and The &lt;span class="caps"&gt;WSA&lt;/span&gt;
DevSIG (Developer&amp;#8217;s &lt;span class="caps"&gt;SIG&lt;/span&gt;) &amp;#8212; formerly known as WinSIG (Window&amp;#8217;s
Developer&amp;#8217;s &lt;span class="caps"&gt;SIG&lt;/span&gt;).&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>September 2001: No Meeting</title><link href="http://nwcpp.org/september-2001.html" rel="alternate"></link><updated>2001-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-09-01:september-2001.html</id><summary type="html"></summary></entry><entry><title>August 2001: No Meeting</title><link href="http://nwcpp.org/august-2001.html" rel="alternate"></link><updated>2001-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-08-01:august-2001.html</id><summary type="html"></summary></entry><entry><title>July 2001: No Meeting</title><link href="http://nwcpp.org/july-2001.html" rel="alternate"></link><updated>2001-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-07-01:july-2001.html</id><summary type="html"></summary></entry><entry><title>June 13th, 2001 — Less is More—or How to Get More Bang for Your Code — Andrei Alexandrescu</title><link href="http://nwcpp.org/june-2001.html" rel="alternate"></link><updated>2001-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-06-01:june-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;If you are tired of writing code, this talk is for you. The scam of the
century - how to get more behavior with less code - will unveil under
your incredulous eyes. Like in those pyramid schemes, a linear
code-writing investment will bring you quick exponential returns. But
this time it&amp;#8217;s for real. We&amp;#8217;ll experience that with a real-world
example: 12 (t-w-e-l-v-e) industry-strength implementations of the
popular standard string, std::basic_string, in a very compact
presentation. Better yet, you can add your pet implementation,
optimization, or feature with ease. Even better, the code compiles with
the compiler produced by a software company near you. Which, you have to
admit, makes the whole thing as real-world as it gets. Disclaimer:
Motion sickness bags not provided. Attendance is at your own&amp;nbsp;risk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is a Development Manager at RealNetworks Inc., based
in Seattle, &lt;span class="caps"&gt;WA&lt;/span&gt;, and author of the acclaimed book Modern C++ Design. He
may be contacted at &lt;a class="reference external" href="mailto:andrei&amp;#64;metalanguage.com"&gt;andrei&amp;#64;metalanguage.com&lt;/a&gt;. Andrei is also a columnist
for C/C++ Users Journal and one of the featured instructors of
&lt;a class="reference external" href="http://www.gotw.ca/cpp_seminar"&gt;The C++ Seminar&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>May 7th, 2001 — Effective STL Sneak Preview — Scott Meyers</title><link href="http://nwcpp.org/may-2001.html" rel="alternate"></link><updated>2001-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-05-01:may-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Overlake Hospital Conference Center&lt;/div&gt;
&lt;div class="line"&gt;121 107th Ave &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Bellevue&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;We are very fortunate to have Scott Meyers come to speak with us this
month. Scott of course is the author of &amp;quot;Effective C++&amp;quot; and &amp;quot;More
Effective C++&amp;quot;, generally acclaimed as two of the most important books
ever written about C++. Every C++ developer should be familiar with
these books. Scott is a highly sought-after speaker and we are grateful
that he has come to speak to&amp;nbsp;us.&lt;/p&gt;
&lt;p&gt;Our meeting will be a world-premiere of Scott&amp;#8217;s material on &lt;span class="caps"&gt;STL&lt;/span&gt; (the
standard template&amp;nbsp;library)!&lt;/p&gt;
&lt;p&gt;Scott&amp;#8217;s description of his talk, presented verbatim:
&amp;quot;For the past 18 months, Scott Meyers has been exploring the &lt;span class="caps"&gt;STL&lt;/span&gt;, and
on April 30 he sends to his publisher the results of his efforts, the
new book, Effective &lt;span class="caps"&gt;STL&lt;/span&gt;: 50 Specific Ways to Improve Your Use of the
Standard Template Library. In this talk, Scott presents two or three
Items from this new book, items that focus on material not usually
covered in descriptions of the &lt;span class="caps"&gt;STL&lt;/span&gt;. He also hands out flyers for the new
book and urges everyone to buy their usual minimum of three copies: one
for the office, one for home, and one for each of your cars (for when
you&amp;#8217;re stuck in&amp;nbsp;traffic).&amp;quot;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 11th, 2001 — CPP-Unit Testing Framework — Troy Frever</title><link href="http://nwcpp.org/april-2001.html" rel="alternate"></link><updated>2001-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-04-01:april-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;A unit testing framework simplifies the creation of a test suite for a
software project. It encourages the programmer to write the tests along
with the code and to run the suite often for verification of code
changes. Troy Frever will review a C++ framework and report on how it
has been used at Cisco Systems/Active&amp;nbsp;Voice.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CPP&lt;/span&gt;-Unit is available from the following&amp;nbsp;sites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.xprogramming.com/software.htm"&gt;http://www.xprogramming.com/software.htm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://sourceforge.net/projects/cppunit/"&gt;http://sourceforge.net/projects/cppunit/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unit testing is a key component of the Extreme Programming Methodology
covered by the following&amp;nbsp;sites:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.xprogramming.com/"&gt;http://www.xprogramming.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.extremeprogramming.org/"&gt;http://www.extremeprogramming.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://groups.yahoo.com/group/extremeprogramming-seattle"&gt;http://groups.yahoo.com/group/extremeprogramming-seattle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recommended book: Martin Fowler&amp;#8217;s &amp;quot;Refactoring: Improving the Design of
Existing&amp;nbsp;Code&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 14th, 2001 — XML and C++ — Mike Moskowitz</title><link href="http://nwcpp.org/march-2001.html" rel="alternate"></link><updated>2001-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-03-01:march-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Note: If you attended the &lt;span class="caps"&gt;WSA&lt;/span&gt; Developer&amp;#8217;s Seminar on &lt;span class="caps"&gt;XML&lt;/span&gt;, you know that
Mike gave a great presentation on &lt;span class="caps"&gt;XML&lt;/span&gt;. But, he didn&amp;#8217;t talk about&amp;nbsp;C++.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 15th, 2001 — Volatile - Multithreaded Programmer’s Best Friend — Andrei Alexandrescu</title><link href="http://nwcpp.org/february-2001.html" rel="alternate"></link><updated>2001-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-02-01:february-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Wouldn&amp;#8217;t it be great if you could have the compiler help you navigate
the murky waters of multithreaded programming? This talk delves into the
under explored issue of volatile-correctness. The exciting discovery is
- if you follow a couple of simple rules in conjunction with the
volatile keyword, you can transform all race conditions into
compile-time&amp;nbsp;errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is a Development Manager with RealNetworks, Inc. He
is a former columnist of the C++ Report magazine, and a columnist of
C/C++ Users Journal. You can reach him at
&lt;a class="reference external" href="mailto:andrei&amp;#64;metalanguage.com"&gt;andrei&amp;#64;metalanguage.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 8th–9th, 2001 — Microsoft’s .NET Initiative — Jeffrey Richter</title><link href="http://nwcpp.org/january-2001.html" rel="alternate"></link><updated>2001-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2001-01-01:january-2001.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Overlake Hospital Conference Center&lt;/div&gt;
&lt;div class="line"&gt;121 107th Ave &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Bellevue, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;NOTE&lt;/span&gt;: The Overlake Hospital Conference Center is off Old Main Street and
107th in Bellevue, not at the hospital itself. Take Main Street and turn
North onto 107th, conference center will be on your&amp;nbsp;left.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This is a very special, 2-day meeting that we are co-hosting with the
Windows Developer&amp;#8217;s &lt;span class="caps"&gt;SIG&lt;/span&gt; of the Washington Software Alliance. Please try
to attend both&amp;nbsp;days.&lt;/p&gt;
&lt;p&gt;We are very fortunate to have this free presentation from Jeffrey, who
is in great demand as a .&lt;span class="caps"&gt;NET&lt;/span&gt; and Windows development expert. If you
attend only one meeting this year, make it this&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;Microsoft .&lt;span class="caps"&gt;NET&lt;/span&gt; is a radical new computing platform that promises to
change software development as we know it. Programmers who embrace .&lt;span class="caps"&gt;NET&lt;/span&gt;
will no longer write to the Windows &lt;span class="caps"&gt;API&lt;/span&gt; or rely upon tried-and-true
tools such as &lt;span class="caps"&gt;MFC&lt;/span&gt; and &lt;span class="caps"&gt;ATL&lt;/span&gt;. Instead, they&amp;#8217;ll target a framework called
the .&lt;span class="caps"&gt;NET&lt;/span&gt; Base Class Library (&lt;span class="caps"&gt;BCL&lt;/span&gt;), and a significant percentage of them
will use a new language, C#, to craft their wares. .&lt;span class="caps"&gt;NET&lt;/span&gt; compilers won&amp;#8217;t
produce native machine code as today&amp;#8217;s compilers do; instead, they&amp;#8217;ll
generate a pseudo-machine code called Intermediate Language (&lt;span class="caps"&gt;IL&lt;/span&gt;) that&amp;#8217;s
executed by the .&lt;span class="caps"&gt;NET&lt;/span&gt; run-time. This new programming paradigm will
simplify the Windows programming model and make Web applications easier
to write than ever before. And it will enable a new generation of
software that runs on every conceivable type of computing device, from
the most powerful Web server to the lowliest hand-held &lt;span class="caps"&gt;PC&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Jeffrey Richter is the author of Microsoft Press&amp;#8217; &amp;quot;Programming
Applications for Microsoft Windows&amp;quot; and M &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; T&amp;#8217;s &amp;quot;Windows 95: A
Developer&amp;#8217;s Guide,&amp;quot; two of the bibles of Windows development. His newest
book, &amp;quot;Programming Server-Side Applications for Windows 2000,&amp;quot; was
published by Microsoft Press in&amp;nbsp;2000.&lt;/p&gt;
&lt;p&gt;Jeffrey is also a frequent contributor to Microsoft&amp;#8217;s &lt;span class="caps"&gt;MSDN&lt;/span&gt; Magazine
(formerly called &lt;span class="caps"&gt;MSJ&lt;/span&gt;) and other trade publications, and is &lt;span class="caps"&gt;MSDN&lt;/span&gt;&amp;#8217;s Win32
columnist. More info on Jeffrey at
&lt;a class="reference external" href="http://www.jeffreyrichter.com"&gt;http://www.jeffreyrichter.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Jeffrey Richter, Jeff Prosise and John Robbins have recently combined
forces to created Wintellect, which will no doubt become the preeminent
training and consulting organization of its kind. Jeffrey&amp;#8217;s presentation
to us comes from material he&amp;#8217;s developed for Wintellect courses. More
information at &lt;a class="reference external" href="http://www.wintellect.com"&gt;http://www.wintellect.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>December 2000: No Meeting</title><link href="http://nwcpp.org/december-2000.html" rel="alternate"></link><updated>2000-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-12-01:december-2000.html</id><summary type="html"></summary></entry><entry><title>November 13th, 2000 — Microsoft Visual Studio 7 Preview — Martyn Lovell</title><link href="http://nwcpp.org/november-2000.html" rel="alternate"></link><updated>2000-11-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-11-01:november-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Visual Studio 7 is due to be launched early next year, and is
Microsoft&amp;#8217;s first real deliverable in their .&lt;span class="caps"&gt;NET&lt;/span&gt; initiative. Martyn
Lovell of Microsoft will give a preview of Visual Studio 7,
concentrating on C# and &lt;span class="caps"&gt;ASP&lt;/span&gt;+.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>October 2000: No Meeting</title><link href="http://nwcpp.org/october-2000.html" rel="alternate"></link><updated>2000-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-10-01:october-2000.html</id><summary type="html"></summary></entry><entry><title>September 13th, 2000 — Change the Way You Write Exception-Safe Code, Forever — Andrei Alexandrescu</title><link href="http://nwcpp.org/september-2000.html" rel="alternate"></link><updated>2000-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-09-01:september-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This talk presents the subtle issues associated with writing correct
code in the presence of exceptions. Writing exception-safe code is a
must for preserving the sanity of any application. This task is daunting
because exceptions introduce hidden control flows and require a modified
way of thinking. Several approaches to exception safety are discussed on
a concrete example, with their advantages and drawbacks. In the end an
useful helper class template ScopeGuard is introduced, that enables you
to write exception-safe code that&amp;#8217;s terse, easy to understand, and easy
to&amp;nbsp;maintain.&lt;/p&gt;
&lt;p&gt;“I presented this to someone who hadn&amp;#8217;t worked with exceptions, and in
the end he said: ‘Cool. Exceptions are not hard, supporting them is
trivial. Do they all do it this way?’ He was surprised to hear that most
programmers do it the hard way and that ScopeGuard is&amp;nbsp;cutting-edge.”&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu is a Development Manager with RealNetworks, Inc. He
is a former columnist of the C++ Report magazine, and a columnist of
C/C++ Users Journal. You can reach him at &lt;a class="reference external" href="mailto:andrei&amp;#64;metalanguage.com"&gt;andrei&amp;#64;metalanguage.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>August 9th, 2000 — Building a High Performance Server Product on Win NT/2000 Using C/C++ — Chris Hickman &amp; Joe Mullally</title><link href="http://nwcpp.org/august-2000.html" rel="alternate"></link><updated>2000-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-08-01:august-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Joe will start by talking about building a high performance server
product on Win &lt;span class="caps"&gt;NT&lt;/span&gt;/2000 using C/C++.&amp;nbsp;Specifically:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I/O Completion&amp;nbsp;Ports&lt;/li&gt;
&lt;li&gt;Object and Context&amp;nbsp;Pooling&lt;/li&gt;
&lt;li&gt;Protocol and Error&amp;nbsp;Mapping&lt;/li&gt;
&lt;li&gt;When and How to use Spinlock vs&amp;nbsp;Interlocks&lt;/li&gt;
&lt;li&gt;Efficient&amp;nbsp;Loops&lt;/li&gt;
&lt;li&gt;Aligning&amp;nbsp;Structs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chris will then finish with a talk about Viathan Corporation and a
software demo. Jeff and Chris will then take some time to answer&amp;nbsp;questions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Chris Hickman, &lt;span class="caps"&gt;CTO&lt;/span&gt; and co-founder of Viathan Corporation, oversees the
technical direction of the company, including new product advances and
the development and test processes. Prior to founding Viathan, Chris
worked for Microsoft&amp;#8217;s Interactive Media Group where he developed core
Internet technologies for the Microsoft Network. As a lead server
developer, he was responsible for design, architecture and
implementation of a storage system for Web-scale applications. He helped
ship two versions of the Microsoft Network and filed for four patents
relating to storage technologies. Prior to Microsoft, Chris spent
several years at Motorola as a software engineer. He was a technical
lead on a software project that developed a suite of Web applications
still used by engineers to facilitate communication and&amp;nbsp;collaboration.&lt;/p&gt;
&lt;p&gt;Joe Mullally, Software Development Manager, Viathan Corporation,
is responsible for managing the development process at Viathan including
the design, development, and development resource allocation for
Viathan&amp;#8217;s distributed data architecture. Prior to joining Viathan, Joe
worked at Microsoft&amp;#8217;s Internet group developing large scale Internet
data services. Most recently, Joe shipped the first releases of
Microsoft Passport, Microsoft&amp;#8217;s e-commerce and Web authentication
service. Prior to Microsoft, Joe worked as a Senior Software Engineer at
&lt;span class="caps"&gt;AVT&lt;/span&gt;&amp;nbsp;Corporation.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>July 2000: No Meeting</title><link href="http://nwcpp.org/july-2000.html" rel="alternate"></link><updated>2000-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-07-01:july-2000.html</id><summary type="html"></summary></entry><entry><title>June 2000: No Meeting</title><link href="http://nwcpp.org/june-2000.html" rel="alternate"></link><updated>2000-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-06-01:june-2000.html</id><summary type="html"></summary></entry><entry><title>May 10th, 2000 — C++ Exceptions — Bobby Schmidt</title><link href="http://nwcpp.org/may-2000.html" rel="alternate"></link><updated>2000-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-05-01:may-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Overview of C++ exceptions, their rationale, and their usage. Followed
with discussion of standard library support, exception safety
considerations, and comparison with Microsoft&amp;#8217;s &lt;span class="caps"&gt;SEH&lt;/span&gt;. Exception &amp;quot;gotchas&amp;quot;
and wisdom sprinkled throughout :^) Talk assumes you understand the
rudiments of C++ exception&amp;nbsp;handling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bobby Schmidt is a writer, teacher, and programmer. For the past five
years, he&amp;#8217;s been Contributing Editor and monthly columnist for the
&amp;quot;C/C++ Users Journal.&amp;quot; He also writes the twice-monthly &amp;quot;Deep C++&amp;quot;
column for &amp;quot;&lt;span class="caps"&gt;MSDN&lt;/span&gt; Online Voices&amp;quot; magazine. Bobby has taught short
sessions and all-day tutorials at both the Software Development and
Embedded Systems conferences. In previous incarnations, he was an
astronomer, private investigator, radio &lt;span class="caps"&gt;DJ&lt;/span&gt;, and wild-animal&amp;nbsp;curator.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>April 12th, 2000 — Testing Object-Oriented Software — Steve Tockey</title><link href="http://nwcpp.org/april-2000.html" rel="alternate"></link><updated>2000-04-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-04-01:april-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This presentation is an overview of software testing techniques with
special emphasis on the application of those techniques to
object-oriented&amp;nbsp;software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Steve Tockey is Vice President of Consulting at Construx Software in
Bellevue. Steve has been employed in the software industry since 1977,
and has worked as a programmer, analyst, designer, researcher,
consultant, and adjunct professor. His career has included stints at
Lawrence Livermore National Laboratory, The Boeing Company, and Rockwell
Collins, Inc. He has a Masters in Software Engineering from Seattle
University and a &lt;span class="caps"&gt;B.A.&lt;/span&gt; in Computer Science from &lt;span class="caps"&gt;U.C.&lt;/span&gt;&amp;nbsp;Berkeley.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>March 8th, 2000 — Real-World Class Design — Mark Wiseman</title><link href="http://nwcpp.org/march-2000.html" rel="alternate"></link><updated>2000-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-03-01:march-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue Northeast&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;There is a lot you may need to consider when designing a C++ class
including ease of use, reusability, extensibility, and portability,
etc.. All of these considerations may suffer because of the real-world
pressures of time and money. Mark will talk about C++ class design using
two classes from recent projects, a password generation class and a
class for searching disks for specific&amp;nbsp;files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Mark Wiseman is president of &lt;a class="reference external" href="http://www.cosolutions.com"&gt;Corner Office Solutions,
Inc.&lt;/a&gt; A company that develops custom
Windows software for business management. Mark is also president of the
Northwest C++ User&amp;#8217;s Group. You can e-mail him at
&lt;a class="reference external" href="mailto:mwiseman&amp;#64;cosolutions.com"&gt;mwiseman&amp;#64;cosolutions.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>February 15th, 2000 — Datatypes++, A C++ Class Library for Windows — Tom Dowdell</title><link href="http://nwcpp.org/february-2000.html" rel="alternate"></link><updated>2000-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-02-01:february-2000.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.avaya.com"&gt;Avaya Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6464 185th Avenue &lt;span class="caps"&gt;NE&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Tom, a &lt;span class="caps"&gt;NWCPP&lt;/span&gt; member, will introduce his company, Intuitive Edge Corp.,
and Datatypes++, Intuitive Edge&amp;#8217;s first product. Datatypes++ is a C++
class library for Windows that extends C++&amp;#8217;s datatypes to text, exact
numeric, date, time, binary, bitset and others. Tom will start by
covering the process of starting a software company and the evolution of
the company&amp;#8217;s accomplishments and goals. The primary body of the talk
will focus on dreaming up an idea for a software product and bringing it
to market. Tom encourages members to download the beta 1 version of
Datatypes++ from the Intuitive Edge Web site , www.IntuitiveEdge.com.
This way, he can field specific questions about the product and the
design decisions he has made about the&amp;nbsp;product.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;About Tom&amp;nbsp;Dowdell:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Programming since 1982, professionally since 1986, C since 1987, C++
since&amp;nbsp;1991&lt;/li&gt;
&lt;li&gt;Graduated from Nicholls State University in Louisiana in 1987 with
Computer Science &lt;span class="caps"&gt;B.S.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Developed a free-form database product for PCs in Pascal, Torrent!,
(independent of full time job) which achieved limited&amp;nbsp;success&lt;/li&gt;
&lt;li&gt;Hired by Microsoft in 1990 as a Software Design Engineer in the &lt;span class="caps"&gt;SQL&lt;/span&gt;
Server database&amp;nbsp;group&lt;/li&gt;
&lt;li&gt;Left Microsoft in 1996 to start a software company, Intuitive&amp;nbsp;Edge&lt;/li&gt;
&lt;li&gt;After 2 years R&amp;amp;D, focused specifically on designing a C++ class
library,&amp;nbsp;Datatypes++&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>January 2000: No Meeting</title><link href="http://nwcpp.org/january-2000.html" rel="alternate"></link><updated>2000-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2000-01-01:january-2000.html</id><summary type="html"></summary></entry></feed>