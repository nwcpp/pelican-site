<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Northwest C++ Users’ Group</title><link href="http://nwcpp.org/" rel="alternate"></link><link href="http://nwcpp.org/feeds/2020.atom.xml" rel="self"></link><id>http://nwcpp.org/</id><updated>2019-12-31T00:00:00-08:00</updated><entry><title>Jan 15th, 2020: DigiPen Senior Research Projects</title><link href="http://nwcpp.org/Jan-2020.html" rel="alternate"></link><updated>2019-12-31T00:00:00-08:00</updated><author><name>Lloyd Moore</name></author><id>tag:nwcpp.org,2019-12-31:Jan-2020.html</id><summary type="html">&lt;div class="section" id="time-and-location"&gt;
&lt;h2&gt;Time and&amp;nbsp;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Jan 15th, 2020 at 7:00 &lt;span class="caps"&gt;PM&lt;/span&gt;&lt;/div&gt;
&lt;div class="line"&gt;Room 1083, Building 30,
&lt;a class="reference external" href="https://www.google.com/maps/place/Microsoft+Building+30/&amp;#64;47.645004,-122.1243829,17z/data=!3m1!4b1!4m5!3m4!1s0x54906d7a92bfda0f:0xc03a9c414544c91e!8m2!3d47.6450004!4d-122.1221942"&gt;Map to building 30&lt;/a&gt;,&lt;/div&gt;
&lt;div class="line"&gt;Microsoft Campus,&lt;/div&gt;
&lt;div class="line"&gt;156th Ave &lt;span class="caps"&gt;NE&lt;/span&gt;,&lt;/div&gt;
&lt;div class="line"&gt;Redmond, &lt;span class="caps"&gt;WA&lt;/span&gt; 98052.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="title"&gt;
&lt;h2&gt;Title&lt;/h2&gt;
&lt;p&gt;DigiPen Senior Research&amp;nbsp;Projects&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="abstracts"&gt;
&lt;h2&gt;Abstracts&lt;/h2&gt;
&lt;p&gt;This talk will feature a collection of senior research projects, presented by DigiPen&amp;nbsp;students:&lt;/p&gt;
&lt;p&gt;Templatized Lua Binding by Lux Cardell:
In order to integrate Lua scripting into a C++ project, each function
accessible to Lua must have a binding function. For a custom game engine
project, I bound Lua to allow our design team to iterate and design more
efficiently. To this end I wrote a set of templates that generated
binding functions automatically based on the data types the functions
required. These templates were designed to encapsulate the entirety of
the binding process, from popping arguments off the Lua stack to
returning an arbitrary number of values. I used variadic templates to
allow the template to handle any function signature. In order to interface
between dynamic and strict typing, I wrote a generic class that wrapped the basic types from Lua and the user-defined types commonly used throughout the&amp;nbsp;engine.&lt;/p&gt;
&lt;p&gt;TypeRT by Michael-Paul Moore:
In order to develop a complex C++ simulation, many collections of data
must be authored to control behavior during execution. Much of this is
driven by the creation of different classes that will each require
similar sets of utilities in order to effectively function. Utilities
such as: Points of Access, serialization, classification, etc. While
engineers can facilitate this functionality on a per class basis, this
is time consuming and can often result in duplicated logic. Furthermore,
while native representation is required during execution, by allowing
the class definitions to reside outside of code we can gain the
following benefits:
•    Accessibility to non-engineers without compiler access
•    Easily extend feature set on data usage inside and outside the main
toolset
•    Since these class definitions are outside the toolset, they do not
require code to be built
•    Further ensures abstraction from your data from different
functionalities
To solve these problems we want to utilize a single flexible wrapper
class, referred to as TypeRT, to centralize interactions for game data.
This creates an environment in which a given functionality only needs to
be implemented once and then gained across multiple data types. In the
actual talk details will then be given on the TypeRT implementation.
Process by which existing classes can be ported will be&amp;nbsp;explained.&lt;/p&gt;
&lt;p&gt;Experiences of a Technical Director and Gameplay programmer by Samuel Schimmel:
Discussing of my experiences both as the technical director and gameplay programmer of a &lt;span class="caps"&gt;UE4&lt;/span&gt; C++ project, and as the &lt;span class="caps"&gt;UE4&lt;/span&gt; C++ gameplay programming &lt;span class="caps"&gt;TA&lt;/span&gt;. The slides for my workshop, footage of the game, and commentary on various gameplay features I&amp;#8217;ve implemented using &lt;span class="caps"&gt;UE4&lt;/span&gt; C++, can be found here: &lt;a class="reference external" href="https://www.samuelschimmel.com/unreal/"&gt;https://www.samuelschimmel.com/unreal/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="speaker-bios"&gt;
&lt;h2&gt;Speaker&amp;nbsp;Bios&lt;/h2&gt;
&lt;p&gt;Lux Cardell:
I&amp;#8217;m a fourth-year student in the Bachelor&amp;#8217;s of
Science in Computer Science program at DigiPen. I&amp;#8217;ve worked on game
engines for the past three years, and in the last year on a physics
project calculating the binding energies of hydrogen in weak magnetic
fields. Additionally, I competed this year in the International
Collegiate Programming Contest, representing DigiPen in the first
division. In the game engine I wrote in my third year, I integrated Lua
scripting to facilitate a team of designers in creating a game. As the
process of writing binding functions for Lua is largely repetitive but
highly function-specific, I found a way to genericize the process of
writing binding libraries using C++&amp;nbsp;templates.&lt;/p&gt;
&lt;p&gt;Michael-Paul Moore:
I am a Senior at DigiPen institute of
technology and currently work as an Associate Software Engineer at
Monolith&amp;nbsp;Productions.&lt;/p&gt;
&lt;p&gt;Samuel Schimmel:
I was the technical director and gameplay programmer of the student game Perdition, which was selected to represent DigiPen at &lt;span class="caps"&gt;PAX&lt;/span&gt; West 2019, and is now available on Steam. Perdition was made in Unreal Engine 4, which allows developers to write gameplay code in C++ or using a proprietary visual scripting language called Blueprint. Despite the popularity and accessibility of Blueprint, I chose to write 100% of Perdition&amp;#8217;s gameplay code in C++ for performance and complexity management reasons. I&amp;#8217;m now the junior project class&amp;#8217; &lt;span class="caps"&gt;UE4&lt;/span&gt; C++ gameplay programming &lt;span class="caps"&gt;TA&lt;/span&gt;, and present an annual workshop on &lt;span class="caps"&gt;UE4&lt;/span&gt; C++ gameplay programming.
My resume can be found here: &lt;a class="reference external" href="https://www.samuelschimmel.com/"&gt;https://www.samuelschimmel.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-word-from-our-sponsor"&gt;
&lt;h2&gt;A Word From Our&amp;nbsp;Sponsor&lt;/h2&gt;
&lt;p&gt;Coming&amp;nbsp;Soon!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Coming&amp;nbsp;Soon!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="digital-media-links"&gt;
&lt;h2&gt;Digital Media&amp;nbsp;Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sign up for our &lt;a class="reference external" href="http://groups.google.com/group/NwcppAnnounce"&gt;announcements mailing list&lt;/a&gt; If you want to be more involved, sign up for our &lt;a class="reference external" href="http://groups.google.com/group/nwcpp-volunteers"&gt;volunteers&lt;/a&gt;&amp;nbsp;list&lt;/li&gt;
&lt;li&gt;Check out our web page at &lt;a class="reference external" href="http://www.nwcpp.org/"&gt;http://www.nwcpp.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a class="reference external" href="http://twitter.com/nwcpp"&gt;&amp;#64;nwcpp&lt;/a&gt; on&amp;nbsp;Twitter&lt;/li&gt;
&lt;li&gt;Join our &lt;a class="reference external" href="http://www.facebook.com/group.php?gid=344125680930"&gt;Facebook&amp;nbsp;Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow our &lt;a class="reference external" href="https://plus.google.com/104974891006782790528/"&gt;Google+&lt;/a&gt;&amp;nbsp;page&lt;/li&gt;
&lt;li&gt;Tune in to our &lt;a class="reference external" href="http://www.youtube.com/user/NWCPP"&gt;YouTube&lt;/a&gt; and &lt;a class="reference external" href="https://vimeo.com/nwcpp"&gt;Vimeo&lt;/a&gt;&amp;nbsp;channels&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry></feed>