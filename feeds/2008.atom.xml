<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Northwest C++ Users’ Group - 2008</title><link href="http://nwcpp.org/" rel="alternate"></link><link href="http://nwcpp.org/feeds/2008.atom.xml" rel="self"></link><id>http://nwcpp.org/</id><updated>2008-12-31T00:00:00-08:00</updated><entry><title>2008</title><link href="http://nwcpp.org/2008-summary.html" rel="alternate"></link><published>2008-12-31T00:00:00-08:00</published><updated>2008-12-31T00:00:00-08:00</updated><author><name>George Reilly</name></author><id>tag:nwcpp.org,2008-12-31:/2008-summary.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/january-2008.html"&gt;January 16th, 2008 — Design Patterns in an Agile Environment — Alan&amp;nbsp;Shalloway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/february-2008.html"&gt;February 20th, 2008 — Memory Allocation: Either Love It or Hate It. (Or Just Think It&amp;#8217;s &lt;span class="caps"&gt;OK&lt;/span&gt;.) — Andrei&amp;nbsp;Alexandrescu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/march-2008.html"&gt;March 19th, 2008 — shared_ptr, Or: How I Learned To Stop Worrying And Love Resource Management — Stephan T.&amp;nbsp;Lavavej&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/april-2008.html"&gt;April 16th …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/january-2008.html"&gt;January 16th, 2008 — Design Patterns in an Agile Environment — Alan&amp;nbsp;Shalloway&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/february-2008.html"&gt;February 20th, 2008 — Memory Allocation: Either Love It or Hate It. (Or Just Think It&amp;#8217;s &lt;span class="caps"&gt;OK&lt;/span&gt;.) — Andrei&amp;nbsp;Alexandrescu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/march-2008.html"&gt;March 19th, 2008 — shared_ptr, Or: How I Learned To Stop Worrying And Love Resource Management — Stephan T.&amp;nbsp;Lavavej&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/april-2008.html"&gt;April 16th, 2008 — Programming Declaratively in C++ Using the Logic Paradigm — Roshan&amp;nbsp;Naik&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/may-2008.html"&gt;May 20th, 2008 — Enforcing Code Feature Requirements in C++ — Scott&amp;nbsp;Meyers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/june-2008.html"&gt;June 18th, 2008 — The C++ Memory Model — Bartosz&amp;nbsp;Milewski&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/july-2008.html"&gt;July 16th, 2008 — Roundtable Meeting — Open&amp;nbsp;Discussion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/august-2008.html"&gt;August 20th, 2008 — Roundtable Meeting — Open&amp;nbsp;Discussion&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/september-2008.html"&gt;September 17th, 2008 — Functional Programming with F# — Chris&amp;nbsp;Smith&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/october-2008.html"&gt;October 15th, 2008 — Concepts in C++0X — Gary&amp;nbsp;Powell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/november-2008.html"&gt;November 19th, 2008 — Things You Never Wanted to Know about Memory Fences — Bartosz&amp;nbsp;Milewski&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nwcpp.org/december-2008.html"&gt;December 2008: No&amp;nbsp;Meeting&lt;/a&gt;&lt;/p&gt;
</content></entry><entry><title>December 2008: No Meeting</title><link href="http://nwcpp.org/december-2008.html" rel="alternate"></link><published>2008-12-01T00:00:00-08:00</published><updated>2008-12-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-12-01:/december-2008.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>November 19th, 2008 — Things You Never Wanted to Know about Memory Fences — Bartosz Milewski</title><link href="http://nwcpp.org/november-2008.html" rel="alternate"></link><published>2008-11-01T00:00:00-07:00</published><updated>2008-11-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-11-01:/november-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="things-you-never-wanted-to-know-about-memory-fences-but-were-afraid-would-be-explained-to-you-anyway"&gt;
&lt;h2&gt;Things You Never Wanted to Know about Memory Fences (But were afraid would be explained to you&amp;nbsp;anyway)&lt;/h2&gt;
&lt;p&gt;Why study fences on an x86, other than to satisfy one’s curiosity?
One reason is that, even when you program …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="things-you-never-wanted-to-know-about-memory-fences-but-were-afraid-would-be-explained-to-you-anyway"&gt;
&lt;h2&gt;Things You Never Wanted to Know about Memory Fences (But were afraid would be explained to you&amp;nbsp;anyway)&lt;/h2&gt;
&lt;p&gt;Why study fences on an x86, other than to satisfy one’s curiosity?
One reason is that, even when you program in a higher-level language (C++ included),
you want to know a bit of assembly to understand some of the tradeoffs.
The other is to fight the temptation to do low-level concurrency tricks.
If you don’t appreciate the complexities of even the simplest relaxed memory model,
that of the x86,
you may be tempted to join the dark side—to feel the power of lock-free&amp;nbsp;programming.&lt;/p&gt;
&lt;p&gt;I’ll analyze a simple algorithm, the Peterson lock,
which, unlike the double-checked locking pattern,
will not work on an x86 multicore without actual fences.
I’ll show how Java and C++0x deal with this&amp;nbsp;problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski has a Ph.D. in Theoretical Physics.
He published several papers on Quantum Gravity and String Theory
before he switched to programming and Computer Science.
He was project lead for the Microsoft search engine before the Internet explosion.
He published a book, &lt;em&gt;C++ In Action&lt;/em&gt;.
Bartosz keeps up with the latest developments in &lt;span class="caps"&gt;CS&lt;/span&gt;
by attending graduate courses and seminars at the &lt;span class="caps"&gt;UW&lt;/span&gt;.
He actively works on the design of the D&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/Memory_Fences.pdf"&gt;slides&lt;/a&gt; of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>October 15th, 2008 — Concepts in C++0X — Gary Powell</title><link href="http://nwcpp.org/october-2008.html" rel="alternate"></link><published>2008-10-01T00:00:00-07:00</published><updated>2008-10-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-10-01:/october-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;An introduction to the Standard Library and Concepts in C++0X.
A general overview, and a couple of in-depth analyses of
how to understand and use this new feature of the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Programming since &amp;#8216;74, using C …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;An introduction to the Standard Library and Concepts in C++0X.
A general overview, and a couple of in-depth analyses of
how to understand and use this new feature of the&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Programming since &amp;#8216;74, using C++ since &amp;#8216;87.
Gary has been one of the early abusers of the C++ language and compiler
to twist it to make functional programing a reality.
A technical consultant and volunteer to the C++ standards committee since 2001
where he has worked with many others on getting
&amp;#8220;bind&amp;#8221;, &amp;#8220;variadac templates&amp;#8221;, &amp;#8220;lambda&amp;#8221;, &amp;#8220;decl_type&amp;#8221;
and other useful stuff into the C++0X standard.
A Google search of &lt;tt class="docutils literal"&gt;&amp;quot;Gary Powell&amp;quot; C++&lt;/tt&gt; will yield a large number of hits
only a few of which are not&amp;nbsp;him.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/concepts-intro.ppt"&gt;slides&lt;/a&gt; from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>September 17th, 2008 — Functional Programming with F# — Chris Smith</title><link href="http://nwcpp.org/september-2008.html" rel="alternate"></link><published>2008-09-01T00:00:00-07:00</published><updated>2008-09-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-09-01:/september-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;With developers reaching the limits for what Object-Oriented programming can do,
they are looking for a new programming paradigm to lead to
cleaner, more elegant solutions.
Functional Programming has been around since the 1930s
but has never been …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;With developers reaching the limits for what Object-Oriented programming can do,
they are looking for a new programming paradigm to lead to
cleaner, more elegant solutions.
Functional Programming has been around since the 1930s
but has never been able to go mainstream&amp;#8230; until now.
This talk will cover Functional Programming
and how it improves on traditional Imperative or Object-Oriented paradigms
by introducing the F# programming language,
Microsoft&amp;#8217;s latest addition to the .&lt;span class="caps"&gt;NET&lt;/span&gt;&amp;nbsp;pantheon.&lt;/p&gt;
&lt;p&gt;As for concurrency,
F# can not only build off the .&lt;span class="caps"&gt;NET&lt;/span&gt; threading libraries (which are &lt;span class="caps"&gt;OK&lt;/span&gt;)
but also introduces a concept called
&lt;a class="reference external" href="http://www.strangelights.com/blog/archive/2007/10/15/1599.aspx"&gt;Asynchronous Workflows&lt;/a&gt;,
which makes writing async code trivial.
I&amp;#8217;ll be sure to cover that in my&amp;nbsp;talk.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Chris Smith is a tester at Microsoft on the F# team,
working hard to bring functional programming to the .&lt;span class="caps"&gt;NET&lt;/span&gt; community.
Before joining with F#, Chris worked on various parts of Visual Studio
from &lt;span class="caps"&gt;WCF&lt;/span&gt; support to the Settings and Resource designers.
Chris lives in the Seattle area and enjoys skiing, indoor soccer,
and blogging about F# at
&lt;a class="reference external" href="http://blogs.msdn.com/chrsmith"&gt;http://blogs.msdn.com/chrsmith&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/Functional_Programming_with_F.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>August 20th, 2008 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/august-2008.html" rel="alternate"></link><published>2008-08-01T00:00:00-07:00</published><updated>2008-08-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-08-01:/august-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>July 16th, 2008 — Roundtable Meeting — Open Discussion</title><link href="http://nwcpp.org/july-2008.html" rel="alternate"></link><published>2008-07-01T00:00:00-07:00</published><updated>2008-07-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-07-01:/july-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.terrabite.org"&gt;Terra Bite Lounge&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;219 Kirkland Ave&lt;/div&gt;
&lt;div class="line"&gt;Kirkland, &lt;span class="caps"&gt;WA&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;This will be an informal discussion over dinner.
Come ready to chat and get to know your fellow &lt;span class="caps"&gt;NWCPP&lt;/span&gt;&amp;nbsp;members.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>June 18th, 2008 — The C++ Memory Model — Bartosz Milewski</title><link href="http://nwcpp.org/june-2008.html" rel="alternate"></link><published>2008-06-01T00:00:00-07:00</published><updated>2008-06-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-06-01:/june-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;What is a memory model and why does C++ need it so badly?
I&amp;#8217;ll try to explain both the practical and the theoretical side of things.
We&amp;#8217;ll look into a few simple multithreaded idioms,
sketch the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;What is a memory model and why does C++ need it so badly?
I&amp;#8217;ll try to explain both the practical and the theoretical side of things.
We&amp;#8217;ll look into a few simple multithreaded idioms,
sketch the Java memory model,
and show the differences between Java and C++.
For the theoretically minded, I&amp;#8217;ll do my best to explain sequential consistency
and the &amp;#8220;happens before&amp;#8221; relationship necessary to describe data races.
We&amp;#8217;ll look into the C++ atomic&amp;nbsp;library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Bartosz Milewski has a Ph.D. in Theoretical Physics.
He published several papers on Quantum Gravity and String Theory
before he switched to programming and Computer Science.
He was project lead for the Microsoft search engine before the Internet explosion.
He published a book, &lt;em&gt;C++ In Action&lt;/em&gt;.
Bartosz keeps up with the latest developments in &lt;span class="caps"&gt;CS&lt;/span&gt;
by attending graduate courses and seminars at the &lt;span class="caps"&gt;UW&lt;/span&gt;.
He actively works on the design of the D&amp;nbsp;language.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/C___Memory_Model.pdf"&gt;slides&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=1457624331939812949"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>May 20th, 2008 — Enforcing Code Feature Requirements in C++ — Scott Meyers</title><link href="http://nwcpp.org/may-2008.html" rel="alternate"></link><published>2008-05-01T00:00:00-07:00</published><updated>2008-05-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-05-01:/may-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Functions often depend on particular behavioral characteristics (&amp;#8220;features&amp;#8221;)
of code they invoke.
For example, thread-safe code must invoke only thread-safe code
if it is to remain thread-safe,
and exception-safe code must invoke only exception-safe code.
This talk describes …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Functions often depend on particular behavioral characteristics (&amp;#8220;features&amp;#8221;)
of code they invoke.
For example, thread-safe code must invoke only thread-safe code
if it is to remain thread-safe,
and exception-safe code must invoke only exception-safe code.
This talk describes a technique that
enables the specification of arbitrary combinations of user-defined code features
on a per-function basis and
that detects violations of feature constraints during compilation.
The technique applies to member functions (both nonvirtual and virtual),
non-member functions, and function templates;
operators are&amp;nbsp;excluded.&lt;/p&gt;
&lt;p&gt;(This is an updated version of the talk Scott gave in April 2007.
Since then, he&amp;#8217;s revised his approach to operate entirely during compilation
and to support overloading on feature sets.
He also no longer shows film clips during the presentation&amp;nbsp;:-})&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Scott Meyers is one of the world&amp;#8217;s foremost authorities on C++;
he provides training and consulting services to clients worldwide.
He wrote the best-selling &lt;em&gt;Effective C++&lt;/em&gt; series
(&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-92488-9/"&gt;Effective C++&lt;/a&gt;,
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-63371-X/"&gt;More Effective C++&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-74962-9/"&gt;Effective &lt;span class="caps"&gt;STL&lt;/span&gt;&lt;/a&gt;);
wrote and designed the innovative
&lt;a class="reference external" href="http://www.awl.com/cseng/titles/0-201-31015-5/"&gt;Effective C++ &lt;span class="caps"&gt;CD&lt;/span&gt;&lt;/a&gt;;
is consulting editor for Addison Wesley&amp;#8217;s &lt;em&gt;Effective Software Development Series&lt;/em&gt;;
was a founding member of the Advisory Board
for &lt;a class="reference external" href="http://www.artima.com/cppsource"&gt;The C++ Source&lt;/a&gt;.
He has a Ph.D in Computer Science from Brown University.
His web site is &lt;a class="reference external" href="http://aristeia.com"&gt;aristeia.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/code_features.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=1147577226734217890"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>April 16th, 2008 — Programming Declaratively in C++ Using the Logic Paradigm — Roshan Naik</title><link href="http://nwcpp.org/april-2008.html" rel="alternate"></link><published>2008-04-01T00:00:00-07:00</published><updated>2008-04-01T00:00:00-07:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-04-01:/april-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The Logic paradigm (&lt;span class="caps"&gt;LP&lt;/span&gt;) is a powerful, Turing-complete programming paradigm
that has seen little representation in mainstream languages
as compared to the Object-Oriented, Imperative and Functional paradigms.
&lt;span class="caps"&gt;LP&lt;/span&gt; is an important approach in Computer Science towards
what is …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;The Logic paradigm (&lt;span class="caps"&gt;LP&lt;/span&gt;) is a powerful, Turing-complete programming paradigm
that has seen little representation in mainstream languages
as compared to the Object-Oriented, Imperative and Functional paradigms.
&lt;span class="caps"&gt;LP&lt;/span&gt; is an important approach in Computer Science towards
what is sometimes referred to as the Holy-Grail of programming,
&amp;#8220;The user states the problem, the computer solves it&amp;#8221;.
Origins of the theory underlying Logic dates back to about 300 &lt;span class="caps"&gt;B.C.
&lt;/span&gt;when Aristotle founded Formal Logic to bring rigor to logical inferencing.
The theory matured into Modern Logic more recently (early 1900s)
when Russell &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Whitehead showed that all of Mathematics could be reduced to Logic.
This talk will provide an introduction to the basics of &lt;span class="caps"&gt;LP&lt;/span&gt; in C++,
followed by examples to develop a feel for thinking
in terms of this paradigm and understand how it blends with the other paradigms.
We finally broaden the scope to see how powerful multiparadigm solutions emerge
when programmers can freely mix and match paradigms.
All code will use standard C++ and
Castor, an open source library
(available from &lt;a class="reference external" href="http://www.mpprogramming.com"&gt;www.mpprogramming.com&lt;/a&gt;)
which brings the Logic paradigm to&amp;nbsp;C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="mailto:roshan&amp;#64;mpprogramming.com"&gt;Roshan Naik&lt;/a&gt;
is an R&amp;amp;D engineer at Hewlett-Packard.
He specializes in multiparadigm programming techniques.
Roshan is also author of &lt;a class="reference external" href="http://www.mpprogramming.com"&gt;Castor&lt;/a&gt;,
an open source library which brings the Logic Paradigm to&amp;nbsp;C++.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/Roshan_Naik_Programming_Declaratively_In_C___using_the_Logic_Paradigm.pptx"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>March 19th, 2008 — shared_ptr, Or: How I Learned To Stop Worrying And Love Resource Management — Stephan T. Lavavej</title><link href="http://nwcpp.org/march-2008.html" rel="alternate"></link><published>2008-03-01T00:00:00-08:00</published><updated>2008-03-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-03-01:/march-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;shared_ptr is the most powerful addition to the Standard C++ Library
since the &lt;span class="caps"&gt;STL&lt;/span&gt; itself.
This presentation begins with an overview of shared_ptr&amp;#8217;s design
and the philosophy behind it.
Next, important uses of shared_ptr are explained in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;shared_ptr is the most powerful addition to the Standard C++ Library
since the &lt;span class="caps"&gt;STL&lt;/span&gt; itself.
This presentation begins with an overview of shared_ptr&amp;#8217;s design
and the philosophy behind it.
Next, important uses of shared_ptr are explained in detail—shared_ptr isn&amp;#8217;t just for sharing!
Of course, new technologies come with new pitfalls.
Fortunately, shared_ptr&amp;#8217;s pitfalls, covered here, can be easily avoided.
This presentation ends with advanced topics:
thread safety, custom deleters, custom allocators, other C++0x features,
and a tour of shared_ptr&amp;#8217;s internals as implemented by Dinkumware.
Whether you haven&amp;#8217;t had a chance to use shared_ptr yet,
or you&amp;#8217;ve done everything but implement it,
this presentation should be useful to&amp;nbsp;you.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Stephan T. Lavavej, who frequently uses his auspicious initials,
joined the Visual C++ Libraries team in January 2007.
He mainly works on the Standard C++ Library,
doing things like fixing epic conformance bugs and nuking iterator bloat.
Recently, he&amp;#8217;s worked with Dinkumware to integrate their &lt;span class="caps"&gt;TR1&lt;/span&gt; implementation
as part of the Visual C++ 2008 Feature&amp;nbsp;Pack.&lt;/p&gt;
&lt;p&gt;He originally joined Microsoft in July 2004,
after receiving the degree of Bachelor Of Science With Honor in Computer Science
from the California Institute Of Technology,
and worked on Outlook 2007 Search.
Among other things, he implemented hit highlighting, making stuff light up&amp;nbsp;yellow.&lt;/p&gt;
&lt;p&gt;His favorite data structure is the vector.
His second favorite data structure is the suffix tree,
which can be used to sort the suffixes of a string in linear time,
because that can be used to implement his favorite algorithm,
the Burrows-Wheeler Transform,
and also because it sounds totally&amp;nbsp;impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/nwcpp-2008.03.19.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>February 20th, 2008 — Memory Allocation: Either Love It or Hate It. (Or Just Think It’s OK.) — Andrei Alexandrescu</title><link href="http://nwcpp.org/february-2008.html" rel="alternate"></link><published>2008-02-01T00:00:00-08:00</published><updated>2008-02-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-02-01:/february-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Memory allocation is a problem so wicked,
many people think it&amp;#8217;s either solved or unsolvable.
This talk goes through the gory details of memory allocation;
what the classic designs are;
how special handcrafted allocators may improve (or …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;Memory allocation is a problem so wicked,
many people think it&amp;#8217;s either solved or unsolvable.
This talk goes through the gory details of memory allocation;
what the classic designs are;
how special handcrafted allocators may improve (or degrade)
the bottom line performance of your application;
how to write a policy-based allocator with a modular design
that beats a monolithic handcrafted one;
and how the advent of manycores influences allocator designs.
Ninety leak-free&amp;nbsp;minutes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Andrei Alexandrescu has achieved the rare feat of becoming an authority
in both industry and research circles.
He almost single-handedly revolutionized and reinvented C++ programming
with his seminal book, &lt;em&gt;Modern C++ Design&lt;/em&gt;.
Andrei&amp;#8217;s other publications include the
award-winning &lt;em&gt;C++ Coding Standards&lt;/em&gt; book (as a coauthor),
four peer-reviewed academic papers,
and dozens of articles in top trade journals,
either under the byline of his Generic&amp;lt;Programming&amp;gt;&amp;nbsp;column,
or as a featured&amp;nbsp;author.&lt;/p&gt;
&lt;p&gt;After having worked in fields as varied as banking, databases, and Internet applications,
Andrei is focusing on graph-based statistical modeling
for natural language processing (&lt;span class="caps"&gt;NLP&lt;/span&gt;),
field rife with huge data sets,
computationally-intensive algorithms,
and massively parallel execution.
His vast expertise, presence, and humor
make Andrei a sought-after speaker at technical&amp;nbsp;conferences.&lt;/p&gt;
&lt;p&gt;Andrei holds a &lt;span class="caps"&gt;BS&lt;/span&gt; in Electrical Engineering from University &amp;#8220;Politehnica&amp;#8221; Bucharest
and an &lt;span class="caps"&gt;MS&lt;/span&gt; in Computer Science from University of Washington,
where he is also a graduating PhD in Summer 2008.
(&lt;span class="caps"&gt;N.B.&lt;/span&gt; He will soon be looking for a job.)
His web site is &lt;a class="reference external" href="http://erdani.com/"&gt;http://erdani.com/&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;Download the &lt;a class="reference external" href="/talks/2008/memory-allocation.screen.pdf"&gt;slides&lt;/a&gt;
from the&amp;nbsp;presentation.&lt;/p&gt;
&lt;p&gt;Watch the &lt;a class="reference external" href="http://video.google.com/videoplay?docid=8718136231005757634"&gt;video&lt;/a&gt;
of the&amp;nbsp;presentation.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>January 16th, 2008 — Design Patterns in an Agile Environment — Alan Shalloway</title><link href="http://nwcpp.org/january-2008.html" rel="alternate"></link><published>2008-01-01T00:00:00-08:00</published><updated>2008-01-01T00:00:00-08:00</updated><author><name>nwcpp</name></author><id>tag:nwcpp.org,2008-01-01:/january-2008.html</id><summary type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns-in-an-agile-environment-the-object-pool-an-example-of-emergent-design"&gt;
&lt;h2&gt;Design Patterns in an Agile Environment – The Object Pool An Example of Emergent&amp;nbsp;Design&lt;/h2&gt;
&lt;p&gt;There runs a heated debate about how to build application architectures.
Many practitioners believe you must design up front,
others feel that doing so leads …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="location"&gt;
&lt;h2&gt;Location&lt;/h2&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="http://www.microsoft.com"&gt;Microsoft Corporation&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;Building 41&lt;/div&gt;
&lt;div class="line"&gt;One Microsoft Way&lt;/div&gt;
&lt;div class="line"&gt;Redmond, Washington 98052&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design-patterns-in-an-agile-environment-the-object-pool-an-example-of-emergent-design"&gt;
&lt;h2&gt;Design Patterns in an Agile Environment – The Object Pool An Example of Emergent&amp;nbsp;Design&lt;/h2&gt;
&lt;p&gt;There runs a heated debate about how to build application architectures.
Many practitioners believe you must design up front,
others feel that doing so leads to over-design.
Unfortunately, much of this debate is based on practices, not principles.
Practices must change when one finds themselves in different contexts.
Principles do&amp;nbsp;not.&lt;/p&gt;
&lt;p&gt;This talk presents a background of several useful principles
which can help in building an application architecture dynamically.
Many modern design practices suggest that code should be developed
in a highly incremental way, with frequent opportunities for validation,
refactoring,
and that we should embrace change as an ally,
rather than seeking to avoid it through heavy analysis.
At the same time, the Design Patterns movement has opened up powerful new ways
of thinking about Objects and their relationships,
and how we can efficiently find our way
to the best designs in a given context.
Initially, these two points of view would seem to be at odds with one another.
However, layered architectures suggested by the proper use of patterns
leads to more flexible designs,
designs that tolerate change better than traditional &lt;span class="caps"&gt;OO&lt;/span&gt; would,
and patterns are a great enabler for an incremental approach.
Furthermore, we have found that refactoring existing code,
in the light of new and/or better-defined requirements,
often leads to patterns,
and that an understanding of this can make for a much more efficient development process overall.
This talk integrates these ideas
by presenting a project done by following the guidelines
of Agile development, refactoring and design&amp;nbsp;patterns.&lt;/p&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is Lean-Agile Software&amp;nbsp;Development?&lt;/li&gt;
&lt;li&gt;What is the Role of&amp;nbsp;Architecture?&lt;/li&gt;
&lt;li&gt;What are design&amp;nbsp;patterns?&lt;/li&gt;
&lt;li&gt;What is&amp;nbsp;Refactoring?&lt;/li&gt;
&lt;li&gt;Refactoring to the Open&amp;nbsp;Closed&lt;/li&gt;
&lt;li&gt;A case study in using the methods&amp;nbsp;described&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A different view of Agile&amp;nbsp;development&lt;/li&gt;
&lt;li&gt;What Emergent Design&amp;nbsp;is&lt;/li&gt;
&lt;li&gt;What the Object-Pool Pattern&amp;nbsp;is&lt;/li&gt;
&lt;li&gt;Why following principles and practices is more important than following rote&amp;nbsp;doctrine&lt;/li&gt;
&lt;li&gt;Synthesize the seemingly disparate views of test-driven-development and design&amp;nbsp;patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This seminar is intended for those people who have some experience already
with design patterns and agile methods.
However, value should be great even without this&amp;nbsp;background.&lt;/p&gt;
&lt;p&gt;Seminar notes will be available at
&lt;a class="reference external" href="http://www.netobjectives.com/free-seminars-notes/"&gt;http://www.netobjectives.com/free-seminars-notes/&lt;/a&gt;
by January 10.
Registration on the Net Objectives site will be required to get&amp;nbsp;them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bio"&gt;
&lt;h2&gt;Bio&lt;/h2&gt;
&lt;p&gt;Alan Shalloway is the founder and &lt;span class="caps"&gt;CEO&lt;/span&gt; of Net Objectives.
With almost 40 years of experience,
Alan is an industry thought leader, trainer and coach
in the areas of Lean Software Development, The Lean-Agile Connection
and using Design Patterns in agile environments.
Alan has developed training and coaching methods for Lean-Agile
that have helped his clients achieve long-term, sustainable productivity gains
using the methods.
He is a popular speaker at prestigious conferences worldwide as well as a trainer/coach.
He is the primary author of
&lt;em&gt;Design Patterns Explained: A New Perspective on Object-Oriented Design&lt;/em&gt;
and is currently writing &lt;em&gt;Lean Anti-Patterns and What to do About Them&lt;/em&gt;.
He is a &lt;span class="caps"&gt;SM&lt;/span&gt;-C Trainer and has a Masters in Computer Science from &lt;span class="caps"&gt;M.I.T.&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
</content></entry></feed>